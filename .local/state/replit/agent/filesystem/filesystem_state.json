{"file_contents":{"replit.md":{"content":"# FastAPI School Payment System\n\n## Overview\n\nThis FastAPI application serves as the foundation for a comprehensive school payment system with QR code payments and electronic invoices. The project is properly configured for both development and production deployment in the Replit environment.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Framework\n- **FastAPI**: Modern Python web framework chosen for its automatic API documentation, type hints support, and high performance\n- **Uvicorn**: ASGI server for running the FastAPI application with async support and production capabilities\n\n### Application Structure\n- **Organized FastAPI structure**: Main application in app/main.py with proper module organization\n- **Production-ready**: Configured with health check endpoints and proper error handling\n- **Ready for expansion**: Structured to support the planned school payment system features\n\n### API Design\n- **RESTful endpoints**: Current endpoints include root (/) and parameterized routes (/items/{id})\n- **Type annotations**: Leverages Python type hints for automatic request/response validation  \n- **Health monitoring**: /healthz endpoint for deployment health checks and monitoring\n\n### Configuration Management\n- **Environment-based**: PORT configuration through environment variables (defaults to 5000)\n- **Production-ready**: Proper host binding to 0.0.0.0 for Replit deployment\n- **Development workflow**: Configured to run with auto-reload on port 5000\n- **Deployment settings**: Optimized for Replit Autoscale with worker processes and proxy headers\n\n## External Dependencies\n\n### Core Dependencies\n- **FastAPI (0.115.0)**: Modern Python web framework for building APIs with automatic documentation\n- **Uvicorn (0.30.6)**: High-performance ASGI server with standard extras for production features\n\n### Deployment Considerations\n- **Replit-optimized**: Configured for both development (with reload) and production deployment\n- **Port configuration**: Uses PORT environment variable with fallback to 5000\n- **Production features**: Workers, proxy headers, and proper container deployment support\n- **Health monitoring**: Built-in health check endpoint for deployment monitoring\n\n## Next Steps\n\nReady to implement the comprehensive school payment system with:\n- QR code payment integration\n- Electronic invoice generation (Vietnamese tax compliance)\n- User management with role-based access\n- PDF generation and email notifications\n- Print management system\n- Reporting and reconciliation features","size_bytes":2582},"app/auth.py":{"content":"from datetime import datetime, timedelta\nfrom typing import Optional\nfrom passlib.context import CryptContext\nfrom jose import JWTError, jwt\nfrom fastapi import HTTPException, status\nimport os\n\n# S·ª≠ d·ª•ng SECRET_KEY t·ª´ environment ho·∫∑c fallback t·∫°m th·ªùi cho development\nSECRET_KEY = os.getenv(\"SECRET_KEY\", \"dev-secret-key-change-in-production-at-least-32-chars-long\")\nALGORITHM = os.getenv(\"ALGORITHM\", \"HS256\")\nACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", \"30\"))\n\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\n\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    \"\"\"X√°c minh m·∫≠t kh·∫©u\"\"\"\n    return pwd_context.verify(plain_password, hashed_password)\n\ndef get_password_hash(password: str) -> str:\n    \"\"\"M√£ h√≥a m·∫≠t kh·∫©u\"\"\"\n    return pwd_context.hash(password)\n\ndef create_access_token(data: dict, expires_delta: Optional[timedelta] = None):\n    \"\"\"T·∫°o JWT access token\"\"\"\n    to_encode = data.copy()\n    \n    # Ensure role is serializable (convert Enum to string)\n    if \"role\" in to_encode and hasattr(to_encode[\"role\"], \"value\"):\n        to_encode[\"role\"] = to_encode[\"role\"].value\n    \n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    \n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n\ndef verify_token(token: str) -> dict:\n    \"\"\"X√°c minh JWT token v√† tr·∫£ v·ªÅ payload\"\"\"\n    try:\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        return payload\n    except JWTError:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Could not validate credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )","size_bytes":1909},"app/config.py":{"content":"","size_bytes":0},"app/database.py":{"content":"from sqlalchemy import create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nimport os\n\n# C·∫•u h√¨nh database: ∆∞u ti√™n SQLite cho development\ndatabase_url = os.getenv(\"DATABASE_URL\")\n\n# Ch·ªâ s·ª≠ d·ª•ng external database n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh r√µ r√†ng v√† kh√¥ng ph·∫£i PostgreSQL default c·ªßa Replit\nif database_url and not database_url.startswith(\"postgresql://postgres:password@helium\"):\n    if database_url.startswith(\"sqlite\"):\n        SQLALCHEMY_DATABASE_URL = database_url\n        engine = create_engine(\n            SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n        )\n    else:\n        # MySQL ho·∫∑c PostgreSQL kh√°c\n        SQLALCHEMY_DATABASE_URL = database_url\n        engine = create_engine(SQLALCHEMY_DATABASE_URL)\nelse:\n    # M·∫∑c ƒë·ªãnh SQLite cho development\n    SQLALCHEMY_DATABASE_URL = \"sqlite:///./school_payment.db\"\n    engine = create_engine(\n        SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n    )\n\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# Dependency ƒë·ªÉ l·∫•y database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()","size_bytes":1282},"app/init.py":{"content":"","size_bytes":0},"app/main.py":{"content":"import os\nimport uvicorn\nfrom fastapi import FastAPI, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal, engine, get_db\nfrom app.models import Base\nfrom app.routers import auth, users, students, orders, payments, invoices, dashboard, print_management\nfrom fastapi.middleware.cors import CORSMiddleware\n\n# T·∫°o c√°c b·∫£ng trong database\nBase.metadata.create_all(bind=engine)\n\n# Kh·ªüi t·∫°o app\napp = FastAPI(\n    title=\"H·ªá th·ªëng Thanh to√°n QR Tr∆∞·ªùng h·ªçc\",\n    description=\"API cho h·ªá th·ªëng thanh to√°n h·ªçc ph√≠ v√† ph√°t h√†nh h√≥a ƒë∆°n ƒëi·ªán t·ª≠\",\n    version=\"1.0.0\"\n)\n\n# CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"https://*.replit.app\", \"https://*.replit.dev\"],  # Restrict to Replit domains\n    allow_credentials=True,\n    allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    allow_headers=[\"*\"],\n)\n\n# Include routers\napp.include_router(auth.router, prefix=\"/api/auth\", tags=[\"Authentication\"])\napp.include_router(users.router, prefix=\"/api/users\", tags=[\"Users\"])\napp.include_router(students.router, prefix=\"/api/students\", tags=[\"Students\"])\napp.include_router(orders.router, prefix=\"/api/orders\", tags=[\"Orders\"])\napp.include_router(payments.router, prefix=\"/api/payments\", tags=[\"Payments\"])\napp.include_router(invoices.router, prefix=\"/api/invoices\", tags=[\"Invoices\"])\napp.include_router(dashboard.router, prefix=\"/api/dashboard\", tags=[\"Dashboard & Reports\"])\napp.include_router(print_management.router, prefix=\"/api/print\", tags=[\"Print Management\"])\n\n# Route ch√≠nh\n@app.get(\"/\")\ndef read_root():\n    return {\n        \"message\": \"H·ªá th·ªëng Thanh to√°n QR Tr∆∞·ªùng h·ªçc üè´\",\n        \"version\": \"1.0.0\",\n        \"docs\": \"/docs\",\n        \"features\": [\n            \"Thanh to√°n QR code\",\n            \"H√≥a ƒë∆°n ƒëi·ªán t·ª≠\",\n            \"Qu·∫£n l√Ω h·ªçc sinh\",\n            \"B√°o c√°o ƒë·ªëi so√°t\"\n        ]\n    }\n\n# Health check endpoint\n@app.get(\"/healthz\")\ndef health_check():\n    return {\"status\": \"healthy\", \"service\": \"school-payment-system\"}\n\n# Production server entry point\nif __name__ == \"__main__\":\n    port = int(os.getenv(\"PORT\", \"5000\"))\n    uvicorn.run(app, host=\"0.0.0.0\", port=port)\n","size_bytes":2296},"app/models.py":{"content":"from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Enum, Text, Numeric, Boolean\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.sql import func\nfrom app.database import Base\nimport enum\n\nclass UserRole(str, enum.Enum):\n    ADMIN = \"admin\"\n    ACCOUNTANT = \"accountant\"  # K·∫ø to√°n\n    TEACHER = \"teacher\"        # Gi√°o v·ª•\n    PARENT = \"parent\"          # Ph·ª• huynh\n\nclass OrderStatus(str, enum.Enum):\n    PENDING = \"pending\"\n    PAID = \"paid\"\n    INVOICED = \"invoiced\"\n\nclass PaymentStatus(str, enum.Enum):\n    PENDING = \"pending\"\n    SUCCESS = \"success\"\n    FAILED = \"failed\"\n\nclass User(Base):\n    __tablename__ = \"users\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100), nullable=False)\n    email = Column(String(100), unique=True, index=True, nullable=False)\n    phone = Column(String(20))\n    role = Column(Enum(UserRole), nullable=False)\n    hashed_password = Column(String(100), nullable=False)\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá v·ªõi h·ªçc sinh (n·∫øu l√† ph·ª• huynh)\n    students = relationship(\"Student\", back_populates=\"parent\")\n\nclass Student(Base):\n    __tablename__ = \"students\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"users.id\"), nullable=False)  # ID ph·ª• huynh\n    name = Column(String(100), nullable=False)\n    student_code = Column(String(20), unique=True, nullable=False)\n    class_name = Column(String(50), nullable=False)\n    grade = Column(String(10))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    parent = relationship(\"User\", back_populates=\"students\")\n    orders = relationship(\"Order\", back_populates=\"student\")\n\nclass Order(Base):\n    __tablename__ = \"orders\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    student_id = Column(Integer, ForeignKey(\"students.id\"), nullable=False)\n    order_code = Column(String(50), unique=True, nullable=False)\n    description = Column(String(255), nullable=False)  # M√¥ t·∫£ kho·∫£n ph√≠\n    amount = Column(Numeric(12, 2), nullable=False)\n    status = Column(Enum(OrderStatus), default=OrderStatus.PENDING)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    due_date = Column(DateTime(timezone=True))\n    \n    # Quan h·ªá\n    student = relationship(\"Student\", back_populates=\"orders\")\n    payments = relationship(\"Payment\", back_populates=\"order\")\n    invoice = relationship(\"Invoice\", back_populates=\"order\", uselist=False)\n\nclass Payment(Base):\n    __tablename__ = \"payments\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    order_id = Column(Integer, ForeignKey(\"orders.id\"), nullable=False)\n    payment_code = Column(String(100), unique=True, nullable=False)\n    gateway_txn_id = Column(String(100))  # ID t·ª´ c·ªïng thanh to√°n\n    amount = Column(Numeric(12, 2), nullable=False)\n    status = Column(Enum(PaymentStatus), default=PaymentStatus.PENDING)\n    payment_method = Column(String(50))  # QR_CODE, BANK_TRANSFER, etc.\n    qr_code_data = Column(Text)  # D·ªØ li·ªáu QR code\n    paid_at = Column(DateTime(timezone=True))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    order = relationship(\"Order\", back_populates=\"payments\")\n\nclass Invoice(Base):\n    __tablename__ = \"invoices\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    order_id = Column(Integer, ForeignKey(\"orders.id\"), nullable=False)\n    invoice_number = Column(String(50), unique=True, nullable=False)\n    invoice_code = Column(String(100))  # M√£ h√≥a ƒë∆°n t·ª´ c∆° quan thu·∫ø\n    e_invoice_code = Column(String(100))  # M√£ h√≥a ƒë∆°n ƒëi·ªán t·ª≠\n    \n    # Th√¥ng tin h√≥a ƒë∆°n\n    customer_name = Column(String(100), nullable=False)\n    customer_tax_code = Column(String(20))\n    customer_address = Column(String(255))\n    \n    amount = Column(Numeric(12, 2), nullable=False)\n    tax_amount = Column(Numeric(12, 2), default=0)\n    total_amount = Column(Numeric(12, 2), nullable=False)\n    \n    # File paths\n    pdf_path = Column(String(255))  # ƒê∆∞·ªùng d·∫´n file PDF\n    xml_path = Column(String(255))  # ƒê∆∞·ªùng d·∫´n file XML g·ªëc\n    \n    issued_at = Column(DateTime(timezone=True), server_default=func.now())\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    order = relationship(\"Order\", back_populates=\"invoice\")\n\nclass Printer(Base):\n    __tablename__ = \"printers\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(100), nullable=False)\n    location = Column(String(100))\n    ip_address = Column(String(50))\n    printer_type = Column(String(50))  # THERMAL, LASER, etc.\n    agent_id = Column(Integer, ForeignKey(\"printer_agents.id\"))\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    agent = relationship(\"PrinterAgent\", back_populates=\"printers\")\n    print_jobs = relationship(\"PrintJob\", back_populates=\"printer\")\n\nclass PrinterAgent(Base):\n    __tablename__ = \"printer_agents\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    host_id = Column(String(100), unique=True, nullable=False)\n    host_name = Column(String(100))\n    jwt_token = Column(String(500))\n    last_seen = Column(DateTime(timezone=True))\n    is_active = Column(Boolean, default=True)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    printers = relationship(\"Printer\", back_populates=\"agent\")\n\nclass PrintJob(Base):\n    __tablename__ = \"print_jobs\"\n    \n    id = Column(Integer, primary_key=True, index=True)\n    printer_id = Column(Integer, ForeignKey(\"printers.id\"), nullable=False)\n    invoice_id = Column(Integer, ForeignKey(\"invoices.id\"), nullable=False)\n    job_data = Column(Text)  # D·ªØ li·ªáu in (HTML, PDF base64, etc.)\n    status = Column(String(20), default=\"pending\")  # pending, sent, completed, failed\n    sent_at = Column(DateTime(timezone=True))\n    completed_at = Column(DateTime(timezone=True))\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    \n    # Quan h·ªá\n    printer = relationship(\"Printer\", back_populates=\"print_jobs\")\n    invoice = relationship(\"Invoice\")","size_bytes":6426},"app/schemas.py":{"content":"from pydantic import BaseModel, EmailStr\nfrom typing import Optional, List\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom app.models import UserRole, OrderStatus, PaymentStatus\n\n# Base schemas\nclass UserBase(BaseModel):\n    name: str\n    email: EmailStr\n    phone: Optional[str] = None\n    role: UserRole\n\nclass UserCreate(UserBase):\n    password: str\n\nclass UserResponse(UserBase):\n    id: int\n    is_active: bool\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Student schemas\nclass StudentBase(BaseModel):\n    name: str\n    student_code: str\n    class_name: str\n    grade: Optional[str] = None\n\nclass StudentCreate(StudentBase):\n    user_id: int\n\nclass StudentResponse(StudentBase):\n    id: int\n    user_id: int\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Order schemas\nclass OrderBase(BaseModel):\n    description: str\n    amount: Decimal\n    due_date: Optional[datetime] = None\n\nclass OrderCreate(OrderBase):\n    student_id: int\n\nclass OrderResponse(OrderBase):\n    id: int\n    student_id: int\n    order_code: str\n    status: OrderStatus\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Payment schemas\nclass PaymentCreate(BaseModel):\n    order_id: int\n    amount: Decimal\n    payment_method: str = \"QR_CODE\"\n\nclass PaymentResponse(BaseModel):\n    id: int\n    order_id: int\n    payment_code: str\n    amount: Decimal\n    status: PaymentStatus\n    qr_code_data: Optional[str] = None\n    created_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Invoice schemas\nclass InvoiceResponse(BaseModel):\n    id: int\n    order_id: int\n    invoice_number: str\n    invoice_code: Optional[str] = None\n    customer_name: str\n    amount: Decimal\n    tax_amount: Decimal\n    total_amount: Decimal\n    issued_at: datetime\n\n    class Config:\n        from_attributes = True\n\n# Authentication schemas\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\n\nclass TokenData(BaseModel):\n    email: Optional[str] = None\n\nclass LoginRequest(BaseModel):\n    email: EmailStr\n    password: str\n\n# QR Code response\nclass QRCodeResponse(BaseModel):\n    payment_id: int\n    qr_code_data: str\n    amount: Decimal\n    order_code: str","size_bytes":2239},"app/routers/__init__.py":{"content":"# Routers package","size_bytes":17},"app/routers/auth.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.security import HTTPBearer, HTTPAuthorizationCredentials\nfrom sqlalchemy.orm import Session\nfrom datetime import timedelta\nfrom app.database import get_db\nfrom app.models import User, UserRole\nfrom app.schemas import LoginRequest, Token, UserCreate, UserResponse\nfrom app.auth import verify_password, create_access_token, verify_token, get_password_hash\n\nrouter = APIRouter()\nsecurity = HTTPBearer()\n\n@router.post(\"/login\", response_model=Token)\ndef login(request: LoginRequest, db: Session = Depends(get_db)):\n    \"\"\"ƒêƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ access token\"\"\"\n    user = db.query(User).filter(User.email == request.email).first()\n    \n    if not user or not verify_password(request.password, user.hashed_password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng\"\n        )\n    \n    if not user.is_active:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a\"\n        )\n    \n    access_token_expires = timedelta(minutes=30)\n    access_token = create_access_token(\n        data={\"sub\": user.email, \"user_id\": user.id, \"role\": user.role.value},\n        expires_delta=access_token_expires\n    )\n    \n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n@router.post(\"/register\", response_model=UserResponse)\ndef register(user_data: UserCreate, db: Session = Depends(get_db)):\n    \"\"\"ƒêƒÉng k√Ω t√†i kho·∫£n ph·ª• huynh m·ªõi\"\"\"\n    # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i\n    existing_user = db.query(User).filter(User.email == user_data.email).first()\n    if existing_user:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng\"\n        )\n    \n    # SECURITY: Ch·ªâ cho ph√©p ƒëƒÉng k√Ω v·ªõi role PARENT\n    # Admin v√† staff ƒë∆∞·ª£c t·∫°o b·ªüi admin th√¥ng qua endpoint kh√°c\n    if user_data.role != UserRole.PARENT:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ c√≥ th·ªÉ ƒëƒÉng k√Ω v·ªõi vai tr√≤ ph·ª• huynh\"\n        )\n    \n    # T·∫°o user m·ªõi\n    hashed_password = get_password_hash(user_data.password)\n    db_user = User(\n        name=user_data.name,\n        email=user_data.email,\n        phone=user_data.phone,\n        role=UserRole.PARENT,  # Force parent role\n        hashed_password=hashed_password\n    )\n    \n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    \n    return db_user\n\ndef get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security), db: Session = Depends(get_db)):\n    \"\"\"L·∫•y th√¥ng tin user hi·ªán t·∫°i t·ª´ token\"\"\"\n    payload = verify_token(credentials.credentials)\n    email = payload.get(\"sub\")\n    \n    if email is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Could not validate credentials\"\n        )\n    \n    user = db.query(User).filter(User.email == email).first()\n    if user is None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"User not found\"\n        )\n    \n    return user\n\n@router.get(\"/me\", response_model=UserResponse)\ndef get_current_user_info(current_user: User = Depends(get_current_user)):\n    \"\"\"L·∫•y th√¥ng tin user hi·ªán t·∫°i\"\"\"\n    return current_user","size_bytes":3480},"app/routers/dashboard.py":{"content":"\"\"\"\nRouter cho Dashboard v√† B√°o c√°o\nCung c·∫•p d·ªØ li·ªáu dashboard cho c√°c role kh√°c nhau\n\"\"\"\nfrom fastapi import APIRouter, Depends, HTTPException, status, Query\nfrom sqlalchemy.orm import Session\nfrom typing import Optional\nfrom datetime import datetime, timedelta\nfrom app.database import get_db\nfrom app.models import User, UserRole\nfrom app.routers.auth import get_current_user\nfrom app.services.dashboard_service import DashboardService\n\nrouter = APIRouter()\n\n@router.get(\"/admin\")\ndef get_admin_dashboard(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Dashboard cho Admin - t·ªïng quan to√†n h·ªá th·ªëng\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem dashboard n√†y\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.get_admin_dashboard()\n    except Exception as e:\n        print(f\"Error getting admin dashboard: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫£i dashboard\"\n        )\n\n@router.get(\"/accountant\")\ndef get_accountant_dashboard(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Dashboard cho K·∫ø to√°n - t·∫≠p trung v√†o h√≥a ƒë∆°n v√† doanh thu\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn xem dashboard n√†y\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.get_accountant_dashboard()\n    except Exception as e:\n        print(f\"Error getting accountant dashboard: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫£i dashboard\"\n        )\n\n@router.get(\"/teacher\")\ndef get_teacher_dashboard(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Dashboard cho Gi√°o v·ª• - t·∫≠p trung v√†o h·ªçc sinh v√† kho·∫£n ph√≠\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.TEACHER]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† gi√°o v·ª• m·ªõi c√≥ quy·ªÅn xem dashboard n√†y\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.get_teacher_dashboard()\n    except Exception as e:\n        print(f\"Error getting teacher dashboard: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫£i dashboard\"\n        )\n\n@router.get(\"/parent\")\ndef get_parent_dashboard(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Dashboard cho Ph·ª• huynh - ch·ªâ xem th√¥ng tin c·ªßa con m√¨nh\"\"\"\n    if current_user.role != UserRole.PARENT:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ ph·ª• huynh m·ªõi c√≥ quy·ªÅn xem dashboard n√†y\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.get_parent_dashboard(current_user.id)\n    except Exception as e:\n        print(f\"Error getting parent dashboard: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫£i dashboard\"\n        )\n\n@router.get(\"/reports/revenue\")\ndef get_revenue_report(\n    start_date: datetime = Query(..., description=\"Ng√†y b·∫Øt ƒë·∫ßu\"),\n    end_date: datetime = Query(..., description=\"Ng√†y k·∫øt th√∫c\"),\n    group_by: str = Query(\"day\", description=\"Nh√≥m theo: day, week, month\"),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"B√°o c√°o doanh thu theo kho·∫£ng th·ªùi gian\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn xem b√°o c√°o n√†y\"\n        )\n    \n    if group_by not in [\"day\", \"week\", \"month\"]:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"group_by ph·∫£i l√†: day, week, ho·∫∑c month\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.generate_revenue_report(start_date, end_date, group_by)\n    except Exception as e:\n        print(f\"Error generating revenue report: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o b√°o c√°o\"\n        )\n\n@router.get(\"/reports/collection\")\ndef get_collection_report(\n    class_name: Optional[str] = Query(None, description=\"L·ªõp c·ª• th·ªÉ (ƒë·ªÉ tr·ªëng ƒë·ªÉ xem t·∫•t c·∫£)\"),\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"B√°o c√°o thu h·ªçc ph√≠ theo l·ªõp\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.TEACHER, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin, gi√°o v·ª• v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn xem b√°o c√°o n√†y\"\n        )\n    \n    try:\n        dashboard_service = DashboardService(db)\n        return dashboard_service.get_collection_report(class_name)\n    except Exception as e:\n        print(f\"Error generating collection report: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o b√°o c√°o\"\n        )","size_bytes":5951},"app/routers/invoices.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom fastapi.responses import FileResponse\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom app.database import get_db\nfrom app.models import User, Order, Payment, Invoice, UserRole, OrderStatus, PaymentStatus\nfrom app.schemas import InvoiceResponse\nfrom app.routers.auth import get_current_user\nfrom app.services.invoice_service import InvoiceService\nfrom app.services.email_service import EmailService\nimport os\nfrom datetime import datetime\n\nrouter = APIRouter()\n\n@router.post(\"/generate/{order_id}\", response_model=InvoiceResponse)\ndef generate_invoice(\n    order_id: int,\n    send_email: bool = True,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Ph√°t h√†nh h√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho ƒë∆°n h√†ng ƒë√£ thanh to√°n\"\"\"\n    # Ch·ªâ admin v√† k·∫ø to√°n c√≥ th·ªÉ ph√°t h√†nh h√≥a ƒë∆°n\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn ph√°t h√†nh h√≥a ƒë∆°n\"\n        )\n    \n    try:\n        # S·ª≠ d·ª•ng InvoiceService ƒë·ªÉ t·∫°o h√≥a ƒë∆°n\n        invoice_service = InvoiceService(db)\n        invoice_result = invoice_service.generate_invoice(order_id)\n        \n        # L·∫•y th√¥ng tin h√≥a ƒë∆°n v·ª´a t·∫°o\n        invoice = db.query(Invoice).filter(Invoice.id == invoice_result[\"invoice_id\"]).first()\n        \n        # G·ª≠i email n·∫øu y√™u c·∫ßu\n        if send_email:\n            try:\n                from app.models import Student, Order\n                order = db.query(Order).filter(Order.id == order_id).first()\n                student = db.query(Student).filter(Student.id == order.student_id).first()\n                parent = db.query(User).filter(User.id == student.user_id).first()\n                \n                email_service = EmailService()\n                email_service.send_invoice_email(\n                    recipient_email=parent.email,\n                    recipient_name=parent.name,\n                    invoice_data={\n                        'invoice_number': invoice.invoice_number,\n                        'invoice_code': invoice.invoice_code,\n                        'lookup_code': invoice.e_invoice_code,\n                        'student_name': student.name,\n                        'class_name': student.class_name,\n                        'description': order.description,\n                        'total_amount': invoice.total_amount\n                    },\n                    pdf_path=invoice.pdf_path,\n                    xml_path=invoice.xml_path\n                )\n            except Exception as email_error:\n                # Log error nh∆∞ng kh√¥ng fail vi·ªác t·∫°o h√≥a ƒë∆°n\n                print(f\"Error sending invoice email: {email_error}\")\n        \n        return invoice\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n    except Exception as e:\n        print(f\"Error generating invoice: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o h√≥a ƒë∆°n\"\n        )\n\n@router.get(\"/\", response_model=List[InvoiceResponse])\ndef get_invoices(\n    skip: int = 0,\n    limit: int = 100,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch h√≥a ƒë∆°n\"\"\"\n    if current_user.role == UserRole.PARENT:\n        # Ph·ª• huynh ch·ªâ xem h√≥a ƒë∆°n c·ªßa h·ªçc sinh m√¨nh\n        from app.models import Student\n        invoices = db.query(Invoice).join(Order).join(Student).filter(\n            Student.user_id == current_user.id\n        ).offset(skip).limit(limit).all()\n    else:\n        # Admin, k·∫ø to√°n, gi√°o v·ª• xem ƒë∆∞·ª£c t·∫•t c·∫£\n        invoices = db.query(Invoice).offset(skip).limit(limit).all()\n    \n    return invoices\n\n@router.get(\"/{invoice_id}\", response_model=InvoiceResponse)\ndef get_invoice(\n    invoice_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y th√¥ng tin h√≥a ƒë∆°n theo ID\"\"\"\n    invoice = db.query(Invoice).filter(Invoice.id == invoice_id).first()\n    if not invoice:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p\n    if current_user.role == UserRole.PARENT:\n        from app.models import Student\n        order = db.query(Order).filter(Order.id == invoice.order_id).first()\n        if order:\n            student = db.query(Student).filter(Student.id == order.student_id).first()\n            if student and student.user_id != current_user.id:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"Kh√¥ng c√≥ quy·ªÅn xem h√≥a ƒë∆°n n√†y\"\n                )\n    \n    return invoice\n\n@router.get(\"/{invoice_id}/pdf\")\ndef download_invoice_pdf(\n    invoice_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫£i file PDF h√≥a ƒë∆°n\"\"\"\n    invoice = db.query(Invoice).filter(Invoice.id == invoice_id).first()\n    if not invoice:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p t∆∞∆°ng t·ª± nh∆∞ get_invoice\n    if current_user.role == UserRole.PARENT:\n        from app.models import Student\n        order = db.query(Order).filter(Order.id == invoice.order_id).first()\n        if order:\n            student = db.query(Student).filter(Student.id == order.student_id).first()\n            if student and student.user_id != current_user.id:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"Kh√¥ng c√≥ quy·ªÅn t·∫£i h√≥a ƒë∆°n n√†y\"\n                )\n    \n    # Ki·ªÉm tra file PDF c√≥ t·ªìn t·∫°i kh√¥ng\n    if not invoice.pdf_path or not os.path.exists(invoice.pdf_path):\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"File PDF h√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i\"\n        )\n    \n    # Tr·∫£ v·ªÅ file PDF\n    return FileResponse(\n        path=invoice.pdf_path,\n        filename=f\"hoadon_{invoice.invoice_number}.pdf\",\n        media_type=\"application/pdf\"\n    )","size_bytes":6562},"app/routers/orders.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom app.database import get_db\nfrom app.models import User, Student, Order, UserRole, OrderStatus\nfrom app.schemas import OrderCreate, OrderResponse\nfrom app.routers.auth import get_current_user\nimport uuid\n\nrouter = APIRouter()\n\n@router.get(\"/\", response_model=List[OrderResponse])\ndef get_orders(\n    skip: int = 0,\n    limit: int = 100,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch ƒë∆°n h√†ng\"\"\"\n    if current_user.role == UserRole.PARENT:\n        # Ph·ª• huynh ch·ªâ xem ƒë∆°n h√†ng c·ªßa h·ªçc sinh m√¨nh\n        orders = db.query(Order).join(Student).filter(\n            Student.user_id == current_user.id\n        ).offset(skip).limit(limit).all()\n    else:\n        # Admin, k·∫ø to√°n, gi√°o v·ª• xem ƒë∆∞·ª£c t·∫•t c·∫£\n        orders = db.query(Order).offset(skip).limit(limit).all()\n    \n    return orders\n\n@router.post(\"/\", response_model=OrderResponse)\ndef create_order(\n    order_data: OrderCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫°o ƒë∆°n h√†ng m·ªõi\"\"\"\n    # Ch·ªâ admin v√† gi√°o v·ª• c√≥ th·ªÉ t·∫°o ƒë∆°n h√†ng\n    if current_user.role not in [UserRole.ADMIN, UserRole.TEACHER]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† gi√°o v·ª• m·ªõi c√≥ quy·ªÅn t·∫°o ƒë∆°n h√†ng\"\n        )\n    \n    # Ki·ªÉm tra h·ªçc sinh t·ªìn t·∫°i\n    student = db.query(Student).filter(Student.id == order_data.student_id).first()\n    if not student:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y h·ªçc sinh\"\n        )\n    \n    # T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t\n    order_code = f\"ORD-{uuid.uuid4().hex[:8].upper()}\"\n    \n    # T·∫°o ƒë∆°n h√†ng m·ªõi\n    db_order = Order(\n        student_id=order_data.student_id,\n        order_code=order_code,\n        description=order_data.description,\n        amount=order_data.amount,\n        due_date=order_data.due_date,\n        status=OrderStatus.PENDING\n    )\n    \n    db.add(db_order)\n    db.commit()\n    db.refresh(db_order)\n    \n    return db_order\n\n@router.get(\"/{order_id}\", response_model=OrderResponse)\ndef get_order(\n    order_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y th√¥ng tin ƒë∆°n h√†ng theo ID\"\"\"\n    order = db.query(Order).filter(Order.id == order_id).first()\n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p\n    if current_user.role == UserRole.PARENT:\n        student = db.query(Student).filter(Student.id == order.student_id).first()\n        if student and student.user_id != current_user.id:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"Kh√¥ng c√≥ quy·ªÅn xem ƒë∆°n h√†ng n√†y\"\n            )\n    \n    return order","size_bytes":3167},"app/routers/payments.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy.sql import func\nfrom typing import List\nfrom app.database import get_db, SessionLocal\nfrom app.models import User, Order, Payment, UserRole, PaymentStatus, OrderStatus\nfrom app.schemas import PaymentCreate, PaymentResponse, QRCodeResponse\nfrom app.routers.auth import get_current_user\nfrom app.services.payment_service import PaymentService\nfrom app.services.email_service import EmailService\nimport uuid\nfrom decimal import Decimal\n\nrouter = APIRouter()\n\n@router.post(\"/create-qr\", response_model=QRCodeResponse)\ndef create_qr_payment(\n    payment_data: PaymentCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫°o QR code cho thanh to√°n s·ª≠ d·ª•ng PaymentService\"\"\"\n    # Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i\n    order = db.query(Order).filter(Order.id == payment_data.order_id).first()\n    if not order:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn thanh to√°n (ph·ª• huynh ch·ªâ thanh to√°n cho con m√¨nh)\n    if current_user.role == UserRole.PARENT:\n        from app.models import Student\n        student = db.query(Student).filter(Student.id == order.student_id).first()\n        if student and student.user_id != current_user.id:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=\"Kh√¥ng c√≥ quy·ªÅn thanh to√°n ƒë∆°n h√†ng n√†y\"\n            )\n    \n    # Ki·ªÉm tra ƒë∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n\n    if order.status != OrderStatus.PENDING:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n ho·∫∑c ƒë√£ c√≥ h√≥a ƒë∆°n\"\n        )\n    \n    try:\n        # S·ª≠ d·ª•ng PaymentService ƒë·ªÉ t·∫°o thanh to√°n\n        payment_service = PaymentService(db)\n        payment_response = payment_service.create_payment_request(\n            order_id=payment_data.order_id,\n            amount=payment_data.amount\n        )\n        \n        return QRCodeResponse(\n            payment_id=payment_response[\"payment_id\"],\n            qr_code_data=payment_response[\"qr_code_image\"],\n            amount=payment_data.amount,\n            order_code=payment_response[\"order_code\"]\n        )\n        \n    except ValueError as e:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=str(e)\n        )\n    except Exception as e:\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o thanh to√°n\"\n        )\n\n@router.post(\"/webhook\")\ndef payment_webhook(webhook_data: dict, db: Session = Depends(get_db)):\n    \"\"\"Webhook nh·∫≠n th√¥ng b√°o thanh to√°n t·ª´ c·ªïng thanh to√°n\"\"\"\n    try:\n        # S·ª≠ d·ª•ng PaymentService ƒë·ªÉ x·ª≠ l√Ω webhook\n        payment_service = PaymentService(db)\n        success = payment_service.process_webhook(webhook_data)\n        \n        if not success:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kh√¥ng th·ªÉ x·ª≠ l√Ω webhook\"\n            )\n        \n        # N·∫øu thanh to√°n th√†nh c√¥ng, g·ª≠i email th√¥ng b√°o\n        if webhook_data.get(\"status\") == \"success\":\n            try:\n                payment = db.query(Payment).filter(\n                    Payment.payment_code == webhook_data.get(\"payment_code\")\n                ).first()\n                \n                if payment:\n                    order = db.query(Order).filter(Order.id == payment.order_id).first()\n                    if order:\n                        from app.models import Student\n                        student = db.query(Student).filter(Student.id == order.student_id).first()\n                        parent = db.query(User).filter(User.id == student.user_id).first()\n                        \n                        # G·ª≠i email x√°c nh·∫≠n thanh to√°n\n                        email_service = EmailService()\n                        email_service.send_payment_confirmation(\n                            recipient_email=parent.email,\n                            recipient_name=parent.name,\n                            payment_data={\n                                'payment_code': payment.payment_code,\n                                'amount': payment.amount,\n                                'student_name': student.name,\n                                'description': order.description,\n                                'paid_at': payment.paid_at.strftime('%d/%m/%Y %H:%M') if payment.paid_at else None\n                            }\n                        )\n            except Exception as email_error:\n                # Log error nh∆∞ng kh√¥ng fail webhook\n                print(f\"Error sending payment confirmation email: {email_error}\")\n        \n        return {\"message\": \"Webhook x·ª≠ l√Ω th√†nh c√¥ng\"}\n        \n    except Exception as e:\n        print(f\"Error processing webhook: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi x·ª≠ l√Ω webhook\"\n        )\n\n@router.get(\"/\", response_model=List[PaymentResponse])\ndef get_payments(\n    skip: int = 0,\n    limit: int = 100,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch thanh to√°n\"\"\"\n    if current_user.role == UserRole.PARENT:\n        # Ph·ª• huynh ch·ªâ xem thanh to√°n c·ªßa h·ªçc sinh m√¨nh\n        from app.models import Student\n        payments = db.query(Payment).join(Order).join(Student).filter(\n            Student.user_id == current_user.id\n        ).offset(skip).limit(limit).all()\n    else:\n        # Admin, k·∫ø to√°n, gi√°o v·ª• xem ƒë∆∞·ª£c t·∫•t c·∫£\n        payments = db.query(Payment).offset(skip).limit(limit).all()\n    \n    return payments\n\n@router.get(\"/{payment_id}\", response_model=PaymentResponse)\ndef get_payment(\n    payment_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y th√¥ng tin thanh to√°n theo ID\"\"\"\n    payment = db.query(Payment).filter(Payment.id == payment_id).first()\n    if not payment:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y giao d·ªãch thanh to√°n\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p\n    if current_user.role == UserRole.PARENT:\n        from app.models import Student\n        order = db.query(Order).filter(Order.id == payment.order_id).first()\n        if order:\n            student = db.query(Student).filter(Student.id == order.student_id).first()\n            if student and student.user_id != current_user.id:\n                raise HTTPException(\n                    status_code=status.HTTP_403_FORBIDDEN,\n                    detail=\"Kh√¥ng c√≥ quy·ªÅn xem giao d·ªãch n√†y\"\n                )\n    \n    return payment","size_bytes":7094},"app/routers/print_management.py":{"content":"\"\"\"\nRouter cho Qu·∫£n l√Ω In ·∫•n\nH·ªó tr·ª£ in h√≥a ƒë∆°n qua LAN/WAN v√† qu·∫£n l√Ω m√°y in\n\"\"\"\nfrom fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List, Optional\nfrom app.database import get_db\nfrom app.models import User, UserRole, Printer, PrintJob, PrinterAgent\nfrom app.routers.auth import get_current_user\nfrom app.services.print_service import PrintJobService, PrinterService, PrintAgentService\nfrom pydantic import BaseModel\n\nrouter = APIRouter()\n\n# Schemas cho print management\nclass PrinterCreate(BaseModel):\n    name: str\n    location: Optional[str] = \"\"\n    ip_address: Optional[str] = \"\"\n    printer_type: Optional[str] = \"NETWORK\"\n\nclass PrinterResponse(BaseModel):\n    id: int\n    name: str\n    location: Optional[str]\n    ip_address: Optional[str]\n    printer_type: str\n    is_active: bool\n    \n    class Config:\n        from_attributes = True\n\nclass PrintJobCreate(BaseModel):\n    invoice_id: int\n    printer_id: int\n    copies: Optional[int] = 1\n    paper_size: Optional[str] = \"A4\"\n\nclass PrintJobResponse(BaseModel):\n    id: int\n    printer_id: int\n    invoice_id: int\n    status: str\n    sent_at: Optional[str] = None\n    created_at: str\n    \n    class Config:\n        from_attributes = True\n\nclass PrintAgentCreate(BaseModel):\n    host_id: str\n    host_name: Optional[str] = \"\"\n    jwt_token: Optional[str] = \"\"\n\n@router.get(\"/printers\", response_model=List[PrinterResponse])\ndef get_printers(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch m√°y in\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn qu·∫£n l√Ω m√°y in\"\n        )\n    \n    printer_service = PrinterService(db)\n    return printer_service.get_active_printers()\n\n@router.post(\"/printers\", response_model=PrinterResponse)\ndef create_printer(\n    printer_data: PrinterCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"ƒêƒÉng k√Ω m√°y in m·ªõi\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th√™m m√°y in\"\n        )\n    \n    try:\n        printer_service = PrinterService(db)\n        printer = printer_service.register_printer(printer_data.dict())\n        \n        if not printer:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω m√°y in\"\n            )\n        \n        return printer\n    except Exception as e:\n        print(f\"Error creating printer: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o m√°y in\"\n        )\n\n@router.get(\"/printers/discover\")\ndef discover_printers(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·ª± ƒë·ªông ph√°t hi·ªán m√°y in tr√™n m·∫°ng\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn qu√©t m√°y in\"\n        )\n    \n    printer_service = PrinterService(db)\n    discovered_printers = printer_service.discover_network_printers()\n    \n    return {\n        \"discovered_printers\": discovered_printers,\n        \"message\": f\"T√¨m th·∫•y {len(discovered_printers)} m√°y in tr√™n m·∫°ng\"\n    }\n\n@router.post(\"/jobs\", response_model=PrintJobResponse)\ndef create_print_job(\n    job_data: PrintJobCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫°o job in h√≥a ƒë∆°n\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn in h√≥a ƒë∆°n\"\n        )\n    \n    try:\n        print_service = PrintJobService(db)\n        print_job = print_service.create_print_job(\n            invoice_id=job_data.invoice_id,\n            printer_id=job_data.printer_id,\n            options={\n                'copies': job_data.copies,\n                'paper_size': job_data.paper_size\n            }\n        )\n        \n        if not print_job:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kh√¥ng th·ªÉ t·∫°o job in\"\n            )\n        \n        return print_job\n    except Exception as e:\n        print(f\"Error creating print job: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi t·∫°o job in\"\n        )\n\n@router.get(\"/jobs\", response_model=List[PrintJobResponse])\ndef get_print_jobs(\n    status_filter: Optional[str] = None,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch job in\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn xem job in\"\n        )\n    \n    print_service = PrintJobService(db)\n    return print_service.get_print_jobs(status=status_filter)\n\n@router.post(\"/jobs/{job_id}/retry\")\ndef retry_print_job(\n    job_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"Th·ª≠ l·∫°i job in b·ªã l·ªói\"\"\"\n    if current_user.role not in [UserRole.ADMIN, UserRole.ACCOUNTANT]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† k·∫ø to√°n m·ªõi c√≥ quy·ªÅn retry job in\"\n        )\n    \n    try:\n        print_service = PrintJobService(db)\n        success = print_service.retry_failed_job(job_id)\n        \n        if not success:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kh√¥ng th·ªÉ retry job in\"\n            )\n        \n        return {\"message\": \"Job in ƒë√£ ƒë∆∞·ª£c th·ª≠ l·∫°i th√†nh c√¥ng\"}\n    except Exception as e:\n        print(f\"Error retrying print job: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi retry job in\"\n        )\n\n@router.post(\"/agents\")\ndef register_print_agent(\n    agent_data: PrintAgentCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"ƒêƒÉng k√Ω Print Agent cho in t·ª´ xa\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn ƒëƒÉng k√Ω print agent\"\n        )\n    \n    try:\n        agent_service = PrintAgentService(db)\n        agent = agent_service.register_agent(agent_data.dict())\n        \n        if not agent:\n            raise HTTPException(\n                status_code=status.HTTP_400_BAD_REQUEST,\n                detail=\"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω print agent\"\n            )\n        \n        return {\n            \"message\": \"Print agent ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng\",\n            \"agent_id\": agent.id,\n            \"host_id\": agent.host_id\n        }\n    except Exception as e:\n        print(f\"Error registering print agent: {e}\")\n        raise HTTPException(\n            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,\n            detail=\"L·ªói h·ªá th·ªëng khi ƒëƒÉng k√Ω print agent\"\n        )\n\n@router.get(\"/agents\")\ndef get_print_agents(\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch Print Agent\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem print agent\"\n        )\n    \n    agents = db.query(PrinterAgent).filter(PrinterAgent.is_active == True).all()\n    \n    return {\n        \"agents\": [\n            {\n                \"id\": agent.id,\n                \"host_id\": agent.host_id,\n                \"host_name\": agent.host_name,\n                \"last_seen\": agent.last_seen.isoformat() if agent.last_seen else None,\n                \"is_active\": agent.is_active\n            }\n            for agent in agents\n        ]\n    }","size_bytes":8581},"app/routers/students.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom app.database import get_db\nfrom app.models import User, Student, UserRole\nfrom app.schemas import StudentCreate, StudentResponse\nfrom app.routers.auth import get_current_user\n\nrouter = APIRouter()\n\n@router.get(\"/\", response_model=List[StudentResponse])\ndef get_students(\n    skip: int = 0,\n    limit: int = 100,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch h·ªçc sinh\"\"\"\n    if current_user.role == UserRole.PARENT:\n        # Ph·ª• huynh ch·ªâ xem ƒë∆∞·ª£c h·ªçc sinh c·ªßa m√¨nh\n        students = db.query(Student).filter(Student.user_id == current_user.id).all()\n    else:\n        # Admin, k·∫ø to√°n, gi√°o v·ª• xem ƒë∆∞·ª£c t·∫•t c·∫£\n        students = db.query(Student).offset(skip).limit(limit).all()\n    \n    return students\n\n@router.post(\"/\", response_model=StudentResponse)\ndef create_student(\n    student_data: StudentCreate,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫°o h·ªçc sinh m·ªõi\"\"\"\n    # Ch·ªâ admin v√† gi√°o v·ª• c√≥ th·ªÉ t·∫°o h·ªçc sinh\n    if current_user.role not in [UserRole.ADMIN, UserRole.TEACHER]:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin v√† gi√°o v·ª• m·ªõi c√≥ quy·ªÅn t·∫°o h·ªçc sinh\"\n        )\n    \n    # Ki·ªÉm tra m√£ h·ªçc sinh ƒë√£ t·ªìn t·∫°i\n    existing_student = db.query(Student).filter(\n        Student.student_code == student_data.student_code\n    ).first()\n    if existing_student:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"M√£ h·ªçc sinh ƒë√£ t·ªìn t·∫°i\"\n        )\n    \n    # Ki·ªÉm tra ph·ª• huynh t·ªìn t·∫°i\n    parent = db.query(User).filter(User.id == student_data.user_id).first()\n    if not parent:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y ph·ª• huynh\"\n        )\n    \n    # T·∫°o h·ªçc sinh m·ªõi\n    db_student = Student(\n        name=student_data.name,\n        student_code=student_data.student_code,\n        class_name=student_data.class_name,\n        grade=student_data.grade,\n        user_id=student_data.user_id\n    )\n    \n    db.add(db_student)\n    db.commit()\n    db.refresh(db_student)\n    \n    return db_student\n\n@router.get(\"/{student_id}\", response_model=StudentResponse)\ndef get_student(\n    student_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y th√¥ng tin h·ªçc sinh theo ID\"\"\"\n    student = db.query(Student).filter(Student.id == student_id).first()\n    if not student:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y h·ªçc sinh\"\n        )\n    \n    # Ki·ªÉm tra quy·ªÅn truy c·∫≠p\n    if current_user.role == UserRole.PARENT and student.user_id != current_user.id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin h·ªçc sinh n√†y\"\n        )\n    \n    return student","size_bytes":3220},"app/routers/users.py":{"content":"from fastapi import APIRouter, Depends, HTTPException, status\nfrom sqlalchemy.orm import Session\nfrom typing import List\nfrom app.database import get_db\nfrom app.models import User, UserRole\nfrom app.schemas import UserCreate, UserResponse\nfrom app.routers.auth import get_current_user\nfrom app.auth import get_password_hash\n\nrouter = APIRouter()\n\ndef require_admin(current_user: User = Depends(get_current_user)):\n    \"\"\"Middleware y√™u c·∫ßu quy·ªÅn admin\"\"\"\n    if current_user.role != UserRole.ADMIN:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Ch·ªâ admin m·ªõi c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y\"\n        )\n    return current_user\n\n@router.get(\"/\", response_model=List[UserResponse])\ndef get_users(\n    skip: int = 0, \n    limit: int = 100,\n    current_user: User = Depends(require_admin),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y danh s√°ch t·∫•t c·∫£ users (ch·ªâ admin)\"\"\"\n    users = db.query(User).offset(skip).limit(limit).all()\n    return users\n\n@router.post(\"/\", response_model=UserResponse)\ndef create_user(\n    user_data: UserCreate,\n    current_user: User = Depends(require_admin),\n    db: Session = Depends(get_db)\n):\n    \"\"\"T·∫°o user m·ªõi (ch·ªâ admin)\"\"\"\n    # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i\n    existing_user = db.query(User).filter(User.email == user_data.email).first()\n    if existing_user:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng\"\n        )\n    \n    # T·∫°o user m·ªõi\n    hashed_password = get_password_hash(user_data.password)\n    db_user = User(\n        name=user_data.name,\n        email=user_data.email,\n        phone=user_data.phone,\n        role=user_data.role,\n        hashed_password=hashed_password\n    )\n    \n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    \n    return db_user\n\n@router.get(\"/{user_id}\", response_model=UserResponse)\ndef get_user(\n    user_id: int,\n    current_user: User = Depends(get_current_user),\n    db: Session = Depends(get_db)\n):\n    \"\"\"L·∫•y th√¥ng tin user theo ID\"\"\"\n    # Admin c√≥ th·ªÉ xem t·∫•t c·∫£, user kh√°c ch·ªâ xem ƒë∆∞·ª£c th√¥ng tin c·ªßa m√¨nh\n    if current_user.role != UserRole.ADMIN and current_user.id != user_id:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"Kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin n√†y\"\n        )\n    \n    user = db.query(User).filter(User.id == user_id).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=\"Kh√¥ng t√¨m th·∫•y user\"\n        )\n    \n    return user","size_bytes":2670},"app/services/__init__.py":{"content":"# Services package for business logic","size_bytes":37},"app/services/dashboard_service.py":{"content":"\"\"\"\nService cung c·∫•p d·ªØ li·ªáu dashboard v√† b√°o c√°o\nPh·ª•c v·ª• c√°c role kh√°c nhau: Admin, K·∫ø to√°n, Gi√°o v·ª•, Ph·ª• huynh\n\"\"\"\nfrom typing import Dict, List, Optional\nfrom datetime import datetime, timedelta\nfrom decimal import Decimal\nfrom sqlalchemy.orm import Session\nfrom sqlalchemy import func, and_, or_\nfrom app.models import (\n    User, Student, Order, Payment, Invoice, UserRole, \n    OrderStatus, PaymentStatus\n)\n\nclass DashboardService:\n    \"\"\"Service cung c·∫•p d·ªØ li·ªáu dashboard\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        \n    def get_admin_dashboard(self) -> Dict:\n        \"\"\"Dashboard cho Admin - t·ªïng quan to√†n h·ªá th·ªëng\"\"\"\n        try:\n            today = datetime.now().date()\n            this_month_start = today.replace(day=1)\n            last_month_start = (this_month_start - timedelta(days=1)).replace(day=1)\n            \n            # Th·ªëng k√™ t·ªïng quan\n            total_students = self.db.query(Student).count()\n            total_parents = self.db.query(User).filter(User.role == UserRole.PARENT).count()\n            total_staff = self.db.query(User).filter(User.role != UserRole.PARENT).count()\n            \n            # Th·ªëng k√™ ƒë∆°n h√†ng\n            total_orders = self.db.query(Order).count()\n            paid_orders = self.db.query(Order).filter(Order.status == OrderStatus.PAID).count()\n            pending_orders = self.db.query(Order).filter(Order.status == OrderStatus.PENDING).count()\n            invoiced_orders = self.db.query(Order).filter(Order.status == OrderStatus.INVOICED).count()\n            \n            # Th·ªëng k√™ doanh thu\n            total_revenue = self.db.query(func.sum(Payment.amount)).filter(\n                Payment.status == PaymentStatus.SUCCESS\n            ).scalar() or Decimal('0')\n            \n            monthly_revenue = self.db.query(func.sum(Payment.amount)).filter(\n                and_(\n                    Payment.status == PaymentStatus.SUCCESS,\n                    Payment.paid_at >= this_month_start\n                )\n            ).scalar() or Decimal('0')\n            \n            last_month_revenue = self.db.query(func.sum(Payment.amount)).filter(\n                and_(\n                    Payment.status == PaymentStatus.SUCCESS,\n                    Payment.paid_at >= last_month_start,\n                    Payment.paid_at < this_month_start\n                )\n            ).scalar() or Decimal('0')\n            \n            # T√≠nh t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng\n            growth_rate = 0\n            if last_month_revenue > 0:\n                growth_rate = float((monthly_revenue - last_month_revenue) / last_month_revenue * 100)\n                \n            # ƒê∆°n h√†ng qu√° h·∫°n\n            overdue_orders = self.db.query(Order).filter(\n                and_(\n                    Order.status == OrderStatus.PENDING,\n                    Order.due_date < datetime.now()\n                )\n            ).count()\n            \n            # Th·ªëng k√™ theo ng√†y g·∫ßn ƒë√¢y (7 ng√†y)\n            daily_stats = []\n            for i in range(7):\n                date = today - timedelta(days=i)\n                daily_revenue = self.db.query(func.sum(Payment.amount)).filter(\n                    and_(\n                        Payment.status == PaymentStatus.SUCCESS,\n                        func.date(Payment.paid_at) == date\n                    )\n                ).scalar() or Decimal('0')\n                \n                daily_orders = self.db.query(Order).filter(\n                    func.date(Order.created_at) == date\n                ).count()\n                \n                daily_stats.append({\n                    'date': date.isoformat(),\n                    'revenue': float(daily_revenue),\n                    'orders': daily_orders\n                })\n                \n            return {\n                'overview': {\n                    'total_students': total_students,\n                    'total_parents': total_parents,\n                    'total_staff': total_staff,\n                    'total_orders': total_orders,\n                    'paid_orders': paid_orders,\n                    'pending_orders': pending_orders,\n                    'invoiced_orders': invoiced_orders,\n                    'overdue_orders': overdue_orders\n                },\n                'revenue': {\n                    'total': float(total_revenue),\n                    'monthly': float(monthly_revenue),\n                    'last_month': float(last_month_revenue),\n                    'growth_rate': round(growth_rate, 2)\n                },\n                'daily_stats': daily_stats\n            }\n            \n        except Exception as e:\n            print(f\"Error getting admin dashboard: {e}\")\n            return {}\n            \n    def get_accountant_dashboard(self) -> Dict:\n        \"\"\"Dashboard cho K·∫ø to√°n - t·∫≠p trung v√†o h√≥a ƒë∆°n v√† doanh thu\"\"\"\n        try:\n            today = datetime.now().date()\n            this_month_start = today.replace(day=1)\n            \n            # Th·ªëng k√™ h√≥a ƒë∆°n\n            total_invoices = self.db.query(Invoice).count()\n            monthly_invoices = self.db.query(Invoice).filter(\n                Invoice.issued_at >= this_month_start\n            ).count()\n            \n            # ƒê∆°n h√†ng c·∫ßn ph√°t h√†nh h√≥a ƒë∆°n\n            need_invoice = self.db.query(Order).filter(\n                Order.status == OrderStatus.PAID\n            ).count()\n            \n            # Doanh thu theo th√°ng\n            monthly_revenue_data = []\n            for i in range(6):  # 6 th√°ng g·∫ßn nh·∫•t\n                month_start = (today.replace(day=1) - timedelta(days=i*30)).replace(day=1)\n                month_end = (month_start + timedelta(days=32)).replace(day=1) - timedelta(days=1)\n                \n                revenue = self.db.query(func.sum(Payment.amount)).filter(\n                    and_(\n                        Payment.status == PaymentStatus.SUCCESS,\n                        Payment.paid_at >= month_start,\n                        Payment.paid_at <= month_end\n                    )\n                ).scalar() or Decimal('0')\n                \n                invoice_count = self.db.query(Invoice).filter(\n                    and_(\n                        Invoice.issued_at >= month_start,\n                        Invoice.issued_at <= month_end\n                    )\n                ).count()\n                \n                monthly_revenue_data.append({\n                    'month': month_start.strftime('%Y-%m'),\n                    'revenue': float(revenue),\n                    'invoices': invoice_count\n                })\n                \n            # Top 10 kho·∫£n thu l·ªõn nh·∫•t th√°ng n√†y\n            top_payments = self.db.query(Payment).join(Order).join(Student).join(User).filter(\n                and_(\n                    Payment.status == PaymentStatus.SUCCESS,\n                    Payment.paid_at >= this_month_start\n                )\n            ).order_by(Payment.amount.desc()).limit(10).all()\n            \n            top_payments_data = []\n            for payment in top_payments:\n                order = self.db.query(Order).filter(Order.id == payment.order_id).first()\n                student = self.db.query(Student).filter(Student.id == order.student_id).first()\n                parent = self.db.query(User).filter(User.id == student.user_id).first()\n                \n                top_payments_data.append({\n                    'payment_code': payment.payment_code,\n                    'amount': float(payment.amount),\n                    'student_name': student.name,\n                    'parent_name': parent.name,\n                    'description': order.description,\n                    'paid_at': payment.paid_at.isoformat() if payment.paid_at else None\n                })\n                \n            return {\n                'overview': {\n                    'total_invoices': total_invoices,\n                    'monthly_invoices': monthly_invoices,\n                    'need_invoice': need_invoice,\n                    'monthly_revenue': float(self.db.query(func.sum(Payment.amount)).filter(\n                        and_(\n                            Payment.status == PaymentStatus.SUCCESS,\n                            Payment.paid_at >= this_month_start\n                        )\n                    ).scalar() or Decimal('0'))\n                },\n                'monthly_revenue_chart': monthly_revenue_data,\n                'top_payments': top_payments_data\n            }\n            \n        except Exception as e:\n            print(f\"Error getting accountant dashboard: {e}\")\n            return {}\n            \n    def get_teacher_dashboard(self) -> Dict:\n        \"\"\"Dashboard cho Gi√°o v·ª• - t·∫≠p trung v√†o h·ªçc sinh v√† kho·∫£n ph√≠\"\"\"\n        try:\n            today = datetime.now().date()\n            this_month_start = today.replace(day=1)\n            \n            # Th·ªëng k√™ h·ªçc sinh\n            total_students = self.db.query(Student).count()\n            \n            # Th·ªëng k√™ theo l·ªõp\n            class_stats = self.db.query(\n                Student.class_name,\n                func.count(Student.id).label('student_count')\n            ).group_by(Student.class_name).all()\n            \n            class_stats_data = [\n                {'class_name': stat.class_name, 'student_count': stat.student_count}\n                for stat in class_stats\n            ]\n            \n            # Th·ªëng k√™ thanh to√°n theo l·ªõp\n            class_payment_stats = []\n            for class_stat in class_stats:\n                class_name = class_stat.class_name\n                \n                # T·ªïng s·ªë ƒë∆°n h√†ng c·ªßa l·ªõp\n                total_orders = self.db.query(Order).join(Student).filter(\n                    Student.class_name == class_name\n                ).count()\n                \n                # S·ªë ƒë∆°n ƒë√£ thanh to√°n\n                paid_orders = self.db.query(Order).join(Student).filter(\n                    and_(\n                        Student.class_name == class_name,\n                        Order.status.in_([OrderStatus.PAID, OrderStatus.INVOICED])\n                    )\n                ).count()\n                \n                # T·ª∑ l·ªá thanh to√°n\n                payment_rate = (paid_orders / total_orders * 100) if total_orders > 0 else 0\n                \n                class_payment_stats.append({\n                    'class_name': class_name,\n                    'total_orders': total_orders,\n                    'paid_orders': paid_orders,\n                    'payment_rate': round(payment_rate, 1)\n                })\n                \n            # Danh s√°ch h·ªçc sinh ch∆∞a thanh to√°n (qu√° h·∫°n)\n            overdue_students = self.db.query(Order, Student, User).join(\n                Student, Order.student_id == Student.id\n            ).join(\n                User, Student.user_id == User.id\n            ).filter(\n                and_(\n                    Order.status == OrderStatus.PENDING,\n                    Order.due_date < datetime.now()\n                )\n            ).limit(20).all()\n            \n            overdue_data = []\n            for order, student, parent in overdue_students:\n                overdue_data.append({\n                    'order_id': order.id,\n                    'student_name': student.name,\n                    'student_code': student.student_code,\n                    'class_name': student.class_name,\n                    'parent_name': parent.name,\n                    'parent_email': parent.email,\n                    'description': order.description,\n                    'amount': float(order.amount),\n                    'due_date': order.due_date.isoformat() if order.due_date else None,\n                    'days_overdue': (datetime.now().date() - order.due_date.date()).days if order.due_date else 0\n                })\n                \n            return {\n                'overview': {\n                    'total_students': total_students,\n                    'total_classes': len(class_stats_data),\n                    'overdue_count': len(overdue_data)\n                },\n                'class_stats': class_stats_data,\n                'class_payment_stats': class_payment_stats,\n                'overdue_students': overdue_data\n            }\n            \n        except Exception as e:\n            print(f\"Error getting teacher dashboard: {e}\")\n            return {}\n            \n    def get_parent_dashboard(self, parent_user_id: int) -> Dict:\n        \"\"\"Dashboard cho Ph·ª• huynh - ch·ªâ xem th√¥ng tin c·ªßa con m√¨nh\"\"\"\n        try:\n            # L·∫•y danh s√°ch h·ªçc sinh c·ªßa ph·ª• huynh\n            students = self.db.query(Student).filter(Student.user_id == parent_user_id).all()\n            student_ids = [s.id for s in students]\n            \n            if not student_ids:\n                return {'students': [], 'orders': [], 'payments': []}\n            \n            # Th·ªëng k√™ ƒë∆°n h√†ng\n            total_orders = self.db.query(Order).filter(\n                Order.student_id.in_(student_ids)\n            ).count()\n            \n            pending_orders = self.db.query(Order).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Order.status == OrderStatus.PENDING\n                )\n            ).count()\n            \n            paid_orders = self.db.query(Order).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Order.status.in_([OrderStatus.PAID, OrderStatus.INVOICED])\n                )\n            ).count()\n            \n            # T·ªïng s·ªë ti·ªÅn ƒë√£ thanh to√°n\n            total_paid = self.db.query(func.sum(Payment.amount)).join(Order).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Payment.status == PaymentStatus.SUCCESS\n                )\n            ).scalar() or Decimal('0')\n            \n            # T·ªïng s·ªë ti·ªÅn ch∆∞a thanh to√°n\n            total_pending = self.db.query(func.sum(Order.amount)).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Order.status == OrderStatus.PENDING\n                )\n            ).scalar() or Decimal('0')\n            \n            # Danh s√°ch ƒë∆°n h√†ng ch∆∞a thanh to√°n\n            pending_orders_detail = self.db.query(Order, Student).join(\n                Student, Order.student_id == Student.id\n            ).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Order.status == OrderStatus.PENDING\n                )\n            ).order_by(Order.due_date.asc()).all()\n            \n            pending_data = []\n            for order, student in pending_orders_detail:\n                is_overdue = order.due_date and order.due_date < datetime.now()\n                pending_data.append({\n                    'order_id': order.id,\n                    'order_code': order.order_code,\n                    'student_name': student.name,\n                    'class_name': student.class_name,\n                    'description': order.description,\n                    'amount': float(order.amount),\n                    'due_date': order.due_date.isoformat() if order.due_date else None,\n                    'is_overdue': is_overdue\n                })\n                \n            # L·ªãch s·ª≠ thanh to√°n g·∫ßn ƒë√¢y\n            recent_payments = self.db.query(Payment, Order, Student).join(\n                Order, Payment.order_id == Order.id\n            ).join(\n                Student, Order.student_id == Student.id\n            ).filter(\n                and_(\n                    Order.student_id.in_(student_ids),\n                    Payment.status == PaymentStatus.SUCCESS\n                )\n            ).order_by(Payment.paid_at.desc()).limit(10).all()\n            \n            payment_history = []\n            for payment, order, student in recent_payments:\n                payment_history.append({\n                    'payment_code': payment.payment_code,\n                    'student_name': student.name,\n                    'description': order.description,\n                    'amount': float(payment.amount),\n                    'paid_at': payment.paid_at.isoformat() if payment.paid_at else None\n                })\n                \n            # Th√¥ng tin h·ªçc sinh\n            students_data = []\n            for student in students:\n                student_orders = self.db.query(Order).filter(Order.student_id == student.id).count()\n                student_paid = self.db.query(Order).filter(\n                    and_(\n                        Order.student_id == student.id,\n                        Order.status.in_([OrderStatus.PAID, OrderStatus.INVOICED])\n                    )\n                ).count()\n                \n                students_data.append({\n                    'id': student.id,\n                    'name': student.name,\n                    'student_code': student.student_code,\n                    'class_name': student.class_name,\n                    'grade': student.grade,\n                    'total_orders': student_orders,\n                    'paid_orders': student_paid\n                })\n                \n            return {\n                'overview': {\n                    'total_orders': total_orders,\n                    'pending_orders': pending_orders,\n                    'paid_orders': paid_orders,\n                    'total_paid': float(total_paid),\n                    'total_pending': float(total_pending)\n                },\n                'students': students_data,\n                'pending_orders': pending_data,\n                'payment_history': payment_history\n            }\n            \n        except Exception as e:\n            print(f\"Error getting parent dashboard: {e}\")\n            return {}\n            \n    def generate_revenue_report(\n        self, \n        start_date: datetime, \n        end_date: datetime,\n        group_by: str = 'day'  # day, week, month\n    ) -> Dict:\n        \"\"\"T·∫°o b√°o c√°o doanh thu theo kho·∫£ng th·ªùi gian\"\"\"\n        try:\n            # L·∫•y d·ªØ li·ªáu thanh to√°n trong kho·∫£ng th·ªùi gian\n            payments = self.db.query(Payment).filter(\n                and_(\n                    Payment.status == PaymentStatus.SUCCESS,\n                    Payment.paid_at >= start_date,\n                    Payment.paid_at <= end_date\n                )\n            ).all()\n            \n            # Group d·ªØ li·ªáu theo y√™u c·∫ßu\n            grouped_data = {}\n            total_revenue = Decimal('0')\n            \n            for payment in payments:\n                if not payment.paid_at:\n                    continue\n                    \n                if group_by == 'day':\n                    key = payment.paid_at.date().isoformat()\n                elif group_by == 'week':\n                    # L·∫•y th·ª© 2 c·ªßa tu·∫ßn\n                    week_start = payment.paid_at.date() - timedelta(days=payment.paid_at.weekday())\n                    key = week_start.isoformat()\n                elif group_by == 'month':\n                    key = payment.paid_at.strftime('%Y-%m')\n                else:\n                    key = payment.paid_at.date().isoformat()\n                    \n                if key not in grouped_data:\n                    grouped_data[key] = {\n                        'revenue': Decimal('0'),\n                        'count': 0,\n                        'period': key\n                    }\n                    \n                grouped_data[key]['revenue'] += payment.amount\n                grouped_data[key]['count'] += 1\n                total_revenue += payment.amount\n                \n            # Convert to list v√† sort\n            revenue_data = []\n            for key in sorted(grouped_data.keys()):\n                data = grouped_data[key]\n                revenue_data.append({\n                    'period': key,\n                    'revenue': float(data['revenue']),\n                    'count': data['count']\n                })\n                \n            return {\n                'total_revenue': float(total_revenue),\n                'total_transactions': len(payments),\n                'period_start': start_date.isoformat(),\n                'period_end': end_date.isoformat(),\n                'group_by': group_by,\n                'data': revenue_data\n            }\n            \n        except Exception as e:\n            print(f\"Error generating revenue report: {e}\")\n            return {}\n            \n    def get_collection_report(self, class_name: Optional[str] = None) -> Dict:\n        \"\"\"B√°o c√°o thu h·ªçc ph√≠ theo l·ªõp\"\"\"\n        try:\n            query = self.db.query(Order, Student, User).join(\n                Student, Order.student_id == Student.id\n            ).join(\n                User, Student.user_id == User.id\n            )\n            \n            if class_name:\n                query = query.filter(Student.class_name == class_name)\n                \n            orders = query.all()\n            \n            # T·ªïng h·ª£p d·ªØ li·ªáu\n            collection_data = {}\n            for order, student, parent in orders:\n                class_key = student.class_name\n                \n                if class_key not in collection_data:\n                    collection_data[class_key] = {\n                        'class_name': class_key,\n                        'total_orders': 0,\n                        'paid_orders': 0,\n                        'pending_orders': 0,\n                        'total_amount': Decimal('0'),\n                        'paid_amount': Decimal('0'),\n                        'pending_amount': Decimal('0'),\n                        'students': set()\n                    }\n                    \n                data = collection_data[class_key]\n                data['total_orders'] += 1\n                data['total_amount'] += order.amount\n                data['students'].add(student.id)\n                \n                if order.status in [OrderStatus.PAID, OrderStatus.INVOICED]:\n                    data['paid_orders'] += 1\n                    data['paid_amount'] += order.amount\n                else:\n                    data['pending_orders'] += 1\n                    data['pending_amount'] += order.amount\n                    \n            # Convert sang list v√† t√≠nh t·ª∑ l·ªá\n            result = []\n            for class_key, data in collection_data.items():\n                collection_rate = (data['paid_amount'] / data['total_amount'] * 100) if data['total_amount'] > 0 else 0\n                \n                result.append({\n                    'class_name': data['class_name'],\n                    'student_count': len(data['students']),\n                    'total_orders': data['total_orders'],\n                    'paid_orders': data['paid_orders'],\n                    'pending_orders': data['pending_orders'],\n                    'total_amount': float(data['total_amount']),\n                    'paid_amount': float(data['paid_amount']),\n                    'pending_amount': float(data['pending_amount']),\n                    'collection_rate': round(collection_rate, 2)\n                })\n                \n            # Sort theo t·ª∑ l·ªá thu\n            result.sort(key=lambda x: x['collection_rate'], reverse=True)\n            \n            return {\n                'classes': result,\n                'summary': {\n                    'total_classes': len(result),\n                    'total_amount': sum(c['total_amount'] for c in result),\n                    'total_paid': sum(c['paid_amount'] for c in result),\n                    'total_pending': sum(c['pending_amount'] for c in result),\n                    'overall_rate': round(sum(c['paid_amount'] for c in result) / sum(c['total_amount'] for c in result) * 100, 2) if sum(c['total_amount'] for c in result) > 0 else 0\n                }\n            }\n            \n        except Exception as e:\n            print(f\"Error generating collection report: {e}\")\n            return {}","size_bytes":24090},"app/services/email_service.py":{"content":"\"\"\"\nService g·ª≠i email notification\nG·ª≠i h√≥a ƒë∆°n ƒëi·ªán t·ª≠ v√† th√¥ng b√°o thanh to√°n\n\"\"\"\nimport os\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\nfrom typing import List, Optional\nfrom jinja2 import Environment, FileSystemLoader\n\nclass EmailService:\n    \"\"\"Service g·ª≠i email\"\"\"\n    \n    def __init__(self):\n        self.smtp_server = os.getenv(\"SMTP_SERVER\", \"smtp.gmail.com\")\n        self.smtp_port = int(os.getenv(\"SMTP_PORT\", \"587\"))\n        self.smtp_username = os.getenv(\"SMTP_USERNAME\", \"\")\n        self.smtp_password = os.getenv(\"SMTP_PASSWORD\", \"\")\n        self.sender_email = os.getenv(\"SENDER_EMAIL\", self.smtp_username)\n        self.sender_name = os.getenv(\"SENDER_NAME\", \"H·ªá th·ªëng thanh to√°n tr∆∞·ªùng h·ªçc\")\n        \n        # Setup Jinja2 cho email templates\n        template_dir = os.path.join(os.path.dirname(__file__), \"..\", \"templates\", \"email\")\n        os.makedirs(template_dir, exist_ok=True)\n        self.jinja_env = Environment(loader=FileSystemLoader(template_dir))\n        \n        # T·∫°o c√°c template email c∆° b·∫£n\n        self._ensure_email_templates()\n        \n    def send_invoice_email(\n        self, \n        recipient_email: str, \n        recipient_name: str,\n        invoice_data: dict,\n        pdf_path: Optional[str] = None,\n        xml_path: Optional[str] = None\n    ) -> bool:\n        \"\"\"G·ª≠i email h√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho ph·ª• huynh\"\"\"\n        try:\n            # Load template\n            template = self.jinja_env.get_template(\"invoice_notification.html\")\n            \n            # Render HTML content\n            html_content = template.render(\n                recipient_name=recipient_name,\n                invoice_data=invoice_data,\n                company_name=os.getenv(\"COMPANY_NAME\", \"Tr∆∞·ªùng Ti·ªÉu h·ªçc ABC\")\n            )\n            \n            # T·∫°o email\n            msg = MIMEMultipart('alternative')\n            msg['Subject'] = f\"H√≥a ƒë∆°n ƒëi·ªán t·ª≠ #{invoice_data['invoice_number']}\"\n            msg['From'] = f\"{self.sender_name} <{self.sender_email}>\"\n            msg['To'] = recipient_email\n            \n            # Text version (fallback)\n            text_content = f\"\"\"\nK√≠nh g·ª≠i {recipient_name},\n\nH√≥a ƒë∆°n ƒëi·ªán t·ª≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ph√°t h√†nh th√†nh c√¥ng.\n\nTh√¥ng tin h√≥a ƒë∆°n:\n- S·ªë h√≥a ƒë∆°n: {invoice_data['invoice_number']}\n- M√£ tra c·ª©u: {invoice_data.get('lookup_code', 'N/A')}\n- H·ªçc sinh: {invoice_data.get('student_name', 'N/A')}\n- S·ªë ti·ªÅn: {invoice_data.get('total_amount', 0):,.0f} VNƒê\n- N·ªôi dung: {invoice_data.get('description', 'N/A')}\n\nB·∫°n c√≥ th·ªÉ tra c·ª©u h√≥a ƒë∆°n t·∫°i: https://tracuuhoadon.gdt.gov.vn\n\nTr√¢n tr·ªçng,\n{self.sender_name}\n            \"\"\"\n            \n            msg.attach(MIMEText(text_content, 'plain', 'utf-8'))\n            msg.attach(MIMEText(html_content, 'html', 'utf-8'))\n            \n            # Attach PDF n·∫øu c√≥\n            if pdf_path and os.path.exists(pdf_path):\n                with open(pdf_path, \"rb\") as attachment:\n                    part = MIMEBase('application', 'pdf')\n                    part.set_payload(attachment.read())\n                    encoders.encode_base64(part)\n                    part.add_header(\n                        'Content-Disposition',\n                        f'attachment; filename= invoice_{invoice_data[\"invoice_number\"]}.pdf'\n                    )\n                    msg.attach(part)\n            \n            # Attach XML n·∫øu c√≥\n            if xml_path and os.path.exists(xml_path):\n                with open(xml_path, \"rb\") as attachment:\n                    part = MIMEBase('application', 'xml')\n                    part.set_payload(attachment.read())\n                    encoders.encode_base64(part)\n                    part.add_header(\n                        'Content-Disposition',\n                        f'attachment; filename= invoice_{invoice_data[\"invoice_number\"]}.xml'\n                    )\n                    msg.attach(part)\n            \n            # G·ª≠i email\n            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n                server.starttls()\n                if self.smtp_username and self.smtp_password:\n                    server.login(self.smtp_username, self.smtp_password)\n                server.send_message(msg)\n                \n            return True\n            \n        except Exception as e:\n            print(f\"Error sending invoice email: {e}\")\n            return False\n            \n    def send_payment_confirmation(\n        self,\n        recipient_email: str,\n        recipient_name: str,\n        payment_data: dict\n    ) -> bool:\n        \"\"\"G·ª≠i email x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng\"\"\"\n        try:\n            template = self.jinja_env.get_template(\"payment_confirmation.html\")\n            \n            html_content = template.render(\n                recipient_name=recipient_name,\n                payment_data=payment_data,\n                company_name=os.getenv(\"COMPANY_NAME\", \"Tr∆∞·ªùng Ti·ªÉu h·ªçc ABC\")\n            )\n            \n            msg = MIMEMultipart('alternative')\n            msg['Subject'] = f\"X√°c nh·∫≠n thanh to√°n #{payment_data['payment_code']}\"\n            msg['From'] = f\"{self.sender_name} <{self.sender_email}>\"\n            msg['To'] = recipient_email\n            \n            text_content = f\"\"\"\nK√≠nh g·ª≠i {recipient_name},\n\nThanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng.\n\nTh√¥ng tin thanh to√°n:\n- M√£ giao d·ªãch: {payment_data['payment_code']}\n- S·ªë ti·ªÅn: {payment_data.get('amount', 0):,.0f} VNƒê\n- H·ªçc sinh: {payment_data.get('student_name', 'N/A')}\n- N·ªôi dung: {payment_data.get('description', 'N/A')}\n- Th·ªùi gian: {payment_data.get('paid_at', 'N/A')}\n\nH√≥a ƒë∆°n ƒëi·ªán t·ª≠ s·∫Ω ƒë∆∞·ª£c g·ª≠i trong th·ªùi gian s·ªõm nh·∫•t.\n\nTr√¢n tr·ªçng,\n{self.sender_name}\n            \"\"\"\n            \n            msg.attach(MIMEText(text_content, 'plain', 'utf-8'))\n            msg.attach(MIMEText(html_content, 'html', 'utf-8'))\n            \n            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n                server.starttls()\n                if self.smtp_username and self.smtp_password:\n                    server.login(self.smtp_username, self.smtp_password)\n                server.send_message(msg)\n                \n            return True\n            \n        except Exception as e:\n            print(f\"Error sending payment confirmation: {e}\")\n            return False\n            \n    def send_payment_reminder(\n        self,\n        recipient_emails: List[str],\n        overdue_orders: List[dict]\n    ) -> bool:\n        \"\"\"G·ª≠i email nh·∫Øc nh·ªü thanh to√°n cho c√°c kho·∫£n qu√° h·∫°n\"\"\"\n        try:\n            template = self.jinja_env.get_template(\"payment_reminder.html\")\n            \n            for email in recipient_emails:\n                # Filter orders for this parent\n                parent_orders = [o for o in overdue_orders if o.get('parent_email') == email]\n                if not parent_orders:\n                    continue\n                    \n                html_content = template.render(\n                    parent_name=parent_orders[0].get('parent_name', 'Ph·ª• huynh'),\n                    orders=parent_orders,\n                    company_name=os.getenv(\"COMPANY_NAME\", \"Tr∆∞·ªùng Ti·ªÉu h·ªçc ABC\")\n                )\n                \n                msg = MIMEMultipart('alternative')\n                msg['Subject'] = \"Nh·∫Øc nh·ªü thanh to√°n h·ªçc ph√≠\"\n                msg['From'] = f\"{self.sender_name} <{self.sender_email}>\"\n                msg['To'] = email\n                \n                msg.attach(MIMEText(html_content, 'html', 'utf-8'))\n                \n                with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:\n                    server.starttls()\n                    if self.smtp_username and self.smtp_password:\n                        server.login(self.smtp_username, self.smtp_password)\n                    server.send_message(msg)\n                    \n            return True\n            \n        except Exception as e:\n            print(f\"Error sending payment reminders: {e}\")\n            return False\n            \n    def _ensure_email_templates(self):\n        \"\"\"T·∫°o c√°c email template c∆° b·∫£n\"\"\"\n        templates = {\n            \"invoice_notification.html\": '''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: #f9f9f9; padding: 20px; }\n        .header { background: #007bff; color: white; text-align: center; padding: 20px; }\n        .content { background: white; padding: 20px; margin: 20px 0; }\n        .footer { text-align: center; color: #666; font-size: 12px; }\n        .info-table { width: 100%; border-collapse: collapse; }\n        .info-table td { padding: 8px; border-bottom: 1px solid #eee; }\n        .info-table .label { font-weight: bold; width: 30%; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>{{ company_name }}</h1>\n            <h2>H√ìA ƒê∆†N ƒêI·ªÜN T·ª¨</h2>\n        </div>\n        \n        <div class=\"content\">\n            <p>K√≠nh g·ª≠i <strong>{{ recipient_name }}</strong>,</p>\n            \n            <p>H√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho kho·∫£n h·ªçc ph√≠ ƒë√£ ƒë∆∞·ª£c ph√°t h√†nh th√†nh c√¥ng.</p>\n            \n            <table class=\"info-table\">\n                <tr>\n                    <td class=\"label\">S·ªë h√≥a ƒë∆°n:</td>\n                    <td>{{ invoice_data.invoice_number }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">M√£ tra c·ª©u:</td>\n                    <td>{{ invoice_data.lookup_code or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">H·ªçc sinh:</td>\n                    <td>{{ invoice_data.student_name or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">L·ªõp:</td>\n                    <td>{{ invoice_data.class_name or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">N·ªôi dung:</td>\n                    <td>{{ invoice_data.description or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">S·ªë ti·ªÅn:</td>\n                    <td><strong>{{ \"{:,.0f}\".format(invoice_data.total_amount or 0) }} VNƒê</strong></td>\n                </tr>\n            </table>\n            \n            <p>B·∫°n c√≥ th·ªÉ tra c·ª©u h√≥a ƒë∆°n t·∫°i: <a href=\"https://tracuuhoadon.gdt.gov.vn\">tracuuhoadon.gdt.gov.vn</a></p>\n            \n            <p>File PDF v√† XML h√≥a ƒë∆°n ƒë∆∞·ª£c ƒë√≠nh k√®m theo email n√†y.</p>\n        </div>\n        \n        <div class=\"footer\">\n            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω h·ªçc ph√≠</p>\n            <p>{{ company_name }}</p>\n        </div>\n    </div>\n</body>\n</html>\n            ''',\n            \n            \"payment_confirmation.html\": '''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: #f9f9f9; padding: 20px; }\n        .header { background: #28a745; color: white; text-align: center; padding: 20px; }\n        .content { background: white; padding: 20px; margin: 20px 0; }\n        .footer { text-align: center; color: #666; font-size: 12px; }\n        .success-icon { font-size: 48px; color: #28a745; text-align: center; }\n        .info-table { width: 100%; border-collapse: collapse; }\n        .info-table td { padding: 8px; border-bottom: 1px solid #eee; }\n        .info-table .label { font-weight: bold; width: 30%; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>{{ company_name }}</h1>\n            <h2>X√ÅC NH·∫¨N THANH TO√ÅN</h2>\n        </div>\n        \n        <div class=\"content\">\n            <div class=\"success-icon\">‚úì</div>\n            \n            <p>K√≠nh g·ª≠i <strong>{{ recipient_name }}</strong>,</p>\n            \n            <p>Thanh to√°n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng!</p>\n            \n            <table class=\"info-table\">\n                <tr>\n                    <td class=\"label\">M√£ giao d·ªãch:</td>\n                    <td>{{ payment_data.payment_code }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">H·ªçc sinh:</td>\n                    <td>{{ payment_data.student_name or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">N·ªôi dung:</td>\n                    <td>{{ payment_data.description or 'N/A' }}</td>\n                </tr>\n                <tr>\n                    <td class=\"label\">S·ªë ti·ªÅn:</td>\n                    <td><strong>{{ \"{:,.0f}\".format(payment_data.amount or 0) }} VNƒê</strong></td>\n                </tr>\n                <tr>\n                    <td class=\"label\">Th·ªùi gian:</td>\n                    <td>{{ payment_data.paid_at or 'N/A' }}</td>\n                </tr>\n            </table>\n            \n            <p>H√≥a ƒë∆°n ƒëi·ªán t·ª≠ s·∫Ω ƒë∆∞·ª£c ph√°t h√†nh v√† g·ª≠i ƒë·∫øn email c·ªßa b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.</p>\n        </div>\n        \n        <div class=\"footer\">\n            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω h·ªçc ph√≠</p>\n            <p>{{ company_name }}</p>\n        </div>\n    </div>\n</body>\n</html>\n            ''',\n            \n            \"payment_reminder.html\": '''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <style>\n        body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 20px; }\n        .container { max-width: 600px; margin: 0 auto; background: #f9f9f9; padding: 20px; }\n        .header { background: #ffc107; color: #212529; text-align: center; padding: 20px; }\n        .content { background: white; padding: 20px; margin: 20px 0; }\n        .footer { text-align: center; color: #666; font-size: 12px; }\n        .orders-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        .orders-table th, .orders-table td { padding: 12px; border: 1px solid #ddd; text-align: left; }\n        .orders-table th { background-color: #f2f2f2; }\n        .overdue { color: #dc3545; font-weight: bold; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>{{ company_name }}</h1>\n            <h2>NH·∫ÆC NH·ªû THANH TO√ÅN</h2>\n        </div>\n        \n        <div class=\"content\">\n            <p>K√≠nh g·ª≠i <strong>{{ parent_name }}</strong>,</p>\n            \n            <p>Ch√∫ng t√¥i xin th√¥ng b√°o c√≥ c√°c kho·∫£n h·ªçc ph√≠ sau ch∆∞a ƒë∆∞·ª£c thanh to√°n:</p>\n            \n            <table class=\"orders-table\">\n                <thead>\n                    <tr>\n                        <th>H·ªçc sinh</th>\n                        <th>L·ªõp</th>\n                        <th>N·ªôi dung</th>\n                        <th>S·ªë ti·ªÅn</th>\n                        <th>H·∫°n thanh to√°n</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for order in orders %}\n                    <tr>\n                        <td>{{ order.student_name }}</td>\n                        <td>{{ order.class_name }}</td>\n                        <td>{{ order.description }}</td>\n                        <td>{{ \"{:,.0f}\".format(order.amount) }} VNƒê</td>\n                        <td class=\"overdue\">{{ order.due_date }}</td>\n                    </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n            \n            <p>ƒê·ªÉ tr√°nh ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác h·ªçc c·ªßa con em, qu√Ω ph·ª• huynh vui l√≤ng thanh to√°n trong th·ªùi gian s·ªõm nh·∫•t.</p>\n            \n            <p>M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá v·ªõi nh√† tr∆∞·ªùng ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.</p>\n        </div>\n        \n        <div class=\"footer\">\n            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω h·ªçc ph√≠</p>\n            <p>{{ company_name }}</p>\n        </div>\n    </div>\n</body>\n</html>\n            '''\n        }\n        \n        template_dir = os.path.join(os.path.dirname(__file__), \"..\", \"templates\", \"email\")\n        for filename, content in templates.items():\n            file_path = os.path.join(template_dir, filename)\n            if not os.path.exists(file_path):\n                with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                    f.write(content.strip())","size_bytes":16800},"app/services/invoice_service.py":{"content":"\"\"\"\nService x·ª≠ l√Ω h√≥a ƒë∆°n ƒëi·ªán t·ª≠\nT√≠ch h·ª£p v·ªõi nh√† cung c·∫•p HƒêƒêT (Viettel, VNPT, MISA...)\n\"\"\"\nimport os\nimport uuid\nimport xml.etree.ElementTree as ET\nfrom datetime import datetime\nfrom decimal import Decimal\nfrom typing import Dict, Optional\nimport requests\nimport hashlib\nfrom weasyprint import HTML, CSS\nfrom sqlalchemy.orm import Session\nfrom app.models import Invoice, Order, User, Student\nfrom jinja2 import Environment, FileSystemLoader\n\nclass EInvoiceProvider:\n    \"\"\"Service t√≠ch h·ª£p v·ªõi nh√† cung c·∫•p HƒêƒêT\"\"\"\n    \n    def __init__(self):\n        self.api_url = os.getenv(\"EINVOICE_API_URL\", \"https://api.demo-einvoice.com\")\n        self.api_key = os.getenv(\"EINVOICE_API_KEY\", \"demo-key\")\n        self.company_tax_code = os.getenv(\"COMPANY_TAX_CODE\", \"0123456789\")\n        self.company_name = os.getenv(\"COMPANY_NAME\", \"Tr∆∞·ªùng Ti·ªÉu h·ªçc ABC\")\n        \n    def create_invoice(self, invoice_data: Dict) -> Dict:\n        \"\"\"\n        G·ª≠i d·ªØ li·ªáu h√≥a ƒë∆°n t·ªõi nh√† cung c·∫•p HƒêƒêT\n        Tr·∫£ v·ªÅ XML k√Ω s·ªë v√† m√£ tra c·ª©u\n        \"\"\"\n        # T·∫°o XML h√≥a ƒë∆°n theo chu·∫©n\n        xml_data = self._generate_invoice_xml(invoice_data)\n        \n        # Payload g·ª≠i t·ªõi nh√† cung c·∫•p\n        payload = {\n            \"company_tax_code\": self.company_tax_code,\n            \"invoice_type\": \"01GTKT\",  # H√≥a ƒë∆°n GTGT\n            \"invoice_data\": xml_data,\n            \"convert_option\": {\n                \"is_convert_to_pdf\": True,\n                \"is_send_email\": False  # S·∫Ω t·ª± g·ª≠i email qua h·ªá th·ªëng c·ªßa m√¨nh\n            }\n        }\n        \n        # Trong production g·ªçi API th·∫≠t\n        # response = requests.post(\n        #     f\"{self.api_url}/invoices/create\",\n        #     json=payload,\n        #     headers={\"Authorization\": f\"Bearer {self.api_key}\"}\n        # )\n        \n        # Mock response cho development\n        invoice_code = f\"C25TTA{datetime.now().strftime('%y%m%d')}{uuid.uuid4().hex[:6].upper()}\"\n        lookup_code = f\"TCT{uuid.uuid4().hex[:8].upper()}\"\n        \n        mock_response = {\n            \"success\": True,\n            \"invoice_code\": invoice_code,\n            \"lookup_code\": lookup_code,\n            \"invoice_number\": invoice_data[\"invoice_number\"],\n            \"signed_xml\": xml_data,  # Trong th·ª±c t·∫ø s·∫Ω l√† XML ƒë√£ k√Ω s·ªë\n            \"pdf_url\": f\"{self.api_url}/invoices/{invoice_code}/pdf\",\n            \"issued_at\": datetime.now().isoformat()\n        }\n        \n        return mock_response\n        \n    def _generate_invoice_xml(self, data: Dict) -> str:\n        \"\"\"T·∫°o XML h√≥a ƒë∆°n theo chu·∫©n Ngh·ªã ƒë·ªãnh 123/2020\"\"\"\n        root = ET.Element(\"Invoice\")\n        \n        # Header\n        header = ET.SubElement(root, \"InvoiceHeader\")\n        ET.SubElement(header, \"InvoiceType\").text = \"01GTKT\"\n        ET.SubElement(header, \"InvoiceCode\").text = data[\"invoice_number\"]\n        ET.SubElement(header, \"InvoiceDate\").text = datetime.now().strftime(\"%Y-%m-%d\")\n        \n        # Seller info\n        seller = ET.SubElement(root, \"SellerInfo\")\n        ET.SubElement(seller, \"TaxCode\").text = self.company_tax_code\n        ET.SubElement(seller, \"CompanyName\").text = self.company_name\n        ET.SubElement(seller, \"Address\").text = data.get(\"seller_address\", \"\")\n        \n        # Buyer info\n        buyer = ET.SubElement(root, \"BuyerInfo\")\n        ET.SubElement(buyer, \"BuyerName\").text = data[\"customer_name\"]\n        ET.SubElement(buyer, \"BuyerTaxCode\").text = data.get(\"customer_tax_code\", \"\")\n        ET.SubElement(buyer, \"BuyerAddress\").text = data.get(\"customer_address\", \"\")\n        \n        # Invoice items\n        items = ET.SubElement(root, \"InvoiceItems\")\n        item = ET.SubElement(items, \"Item\")\n        ET.SubElement(item, \"Description\").text = data[\"description\"]\n        ET.SubElement(item, \"Quantity\").text = \"1\"\n        ET.SubElement(item, \"UnitPrice\").text = str(data[\"amount\"])\n        ET.SubElement(item, \"Amount\").text = str(data[\"amount\"])\n        ET.SubElement(item, \"TaxRate\").text = str(data.get(\"tax_rate\", 0))\n        ET.SubElement(item, \"TaxAmount\").text = str(data.get(\"tax_amount\", 0))\n        \n        # Totals\n        totals = ET.SubElement(root, \"InvoiceTotals\")\n        ET.SubElement(totals, \"TotalAmount\").text = str(data[\"total_amount\"])\n        ET.SubElement(totals, \"TotalTaxAmount\").text = str(data.get(\"tax_amount\", 0))\n        ET.SubElement(totals, \"GrandTotal\").text = str(data[\"total_amount\"])\n        \n        return ET.tostring(root, encoding='unicode')\n\nclass InvoiceService:\n    \"\"\"Service x·ª≠ l√Ω business logic h√≥a ƒë∆°n\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        self.einvoice_provider = EInvoiceProvider()\n        \n        # Setup Jinja2 template engine\n        template_dir = os.path.join(os.path.dirname(__file__), \"..\", \"templates\")\n        os.makedirs(template_dir, exist_ok=True)\n        self.jinja_env = Environment(loader=FileSystemLoader(template_dir))\n        \n    def generate_invoice(self, order_id: int) -> Dict:\n        \"\"\"T·∫°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho ƒë∆°n h√†ng ƒë√£ thanh to√°n\"\"\"\n        # L·∫•y th√¥ng tin ƒë∆°n h√†ng\n        order = self.db.query(Order).filter(Order.id == order_id).first()\n        if not order or order.status != \"PAID\":\n            raise ValueError(\"ƒê∆°n h√†ng ch∆∞a ƒë∆∞·ª£c thanh to√°n\")\n            \n        # L·∫•y th√¥ng tin h·ªçc sinh v√† ph·ª• huynh\n        student = self.db.query(Student).filter(Student.id == order.student_id).first()\n        parent = self.db.query(User).filter(User.id == student.user_id).first()\n        \n        # T·∫°o s·ªë h√≥a ƒë∆°n\n        invoice_number = f\"HD{datetime.now().strftime('%Y%m%d')}{uuid.uuid4().hex[:6].upper()}\"\n        \n        # D·ªØ li·ªáu h√≥a ƒë∆°n\n        invoice_data = {\n            \"invoice_number\": invoice_number,\n            \"customer_name\": parent.name,\n            \"customer_tax_code\": \"\",  # Ph·ª• huynh th∆∞·ªùng kh√¥ng c√≥ MST\n            \"customer_address\": \"\",\n            \"description\": order.description,\n            \"amount\": order.amount,\n            \"tax_rate\": 0,  # H·ªçc ph√≠ th∆∞·ªùng kh√¥ng ch·ªãu VAT\n            \"tax_amount\": 0,\n            \"total_amount\": order.amount,\n            \"student_name\": student.name,\n            \"student_code\": student.student_code,\n            \"class_name\": student.class_name\n        }\n        \n        # G·ª≠i t·ªõi nh√† cung c·∫•p HƒêƒêT\n        einvoice_response = self.einvoice_provider.create_invoice(invoice_data)\n        \n        if not einvoice_response.get(\"success\"):\n            raise ValueError(\"Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠\")\n            \n        # L∆∞u invoice record\n        invoice = Invoice(\n            order_id=order_id,\n            invoice_number=invoice_number,\n            invoice_code=einvoice_response[\"invoice_code\"],\n            e_invoice_code=einvoice_response[\"lookup_code\"],\n            customer_name=parent.name,\n            customer_tax_code=\"\",\n            customer_address=\"\",\n            amount=order.amount,\n            tax_amount=0,\n            total_amount=order.amount\n        )\n        \n        self.db.add(invoice)\n        \n        # C·∫≠p nh·∫≠t order status\n        order.status = \"INVOICED\"\n        \n        self.db.commit()\n        self.db.refresh(invoice)\n        \n        # T·∫°o PDF\n        pdf_path = self._generate_pdf(invoice, invoice_data)\n        invoice.pdf_path = pdf_path\n        \n        # L∆∞u XML\n        xml_path = self._save_xml(einvoice_response[\"signed_xml\"], invoice.id)\n        invoice.xml_path = xml_path\n        \n        self.db.commit()\n        \n        return {\n            \"invoice_id\": invoice.id,\n            \"invoice_number\": invoice_number,\n            \"invoice_code\": einvoice_response[\"invoice_code\"],\n            \"lookup_code\": einvoice_response[\"lookup_code\"],\n            \"pdf_path\": pdf_path,\n            \"xml_path\": xml_path\n        }\n        \n    def _generate_pdf(self, invoice: Invoice, data: Dict) -> str:\n        \"\"\"T·∫°o PDF h√≥a ƒë∆°n s·ª≠ d·ª•ng WeasyPrint\"\"\"\n        # T·∫°o template HTML n·∫øu ch∆∞a c√≥\n        self._ensure_invoice_template()\n        \n        # Load template\n        template = self.jinja_env.get_template(\"invoice_template.html\")\n        \n        # Render HTML\n        html_content = template.render(\n            invoice=invoice,\n            data=data,\n            company_name=os.getenv(\"COMPANY_NAME\", \"Tr∆∞·ªùng Ti·ªÉu h·ªçc ABC\"),\n            company_address=os.getenv(\"COMPANY_ADDRESS\", \"\"),\n            company_phone=os.getenv(\"COMPANY_PHONE\", \"\"),\n            generated_at=datetime.now()\n        )\n        \n        # T·∫°o PDF\n        pdf_dir = \"invoices/pdf\"\n        os.makedirs(pdf_dir, exist_ok=True)\n        pdf_path = f\"{pdf_dir}/invoice_{invoice.id}.pdf\"\n        \n        HTML(string=html_content).write_pdf(pdf_path)\n        \n        return pdf_path\n        \n    def _save_xml(self, xml_content: str, invoice_id: int) -> str:\n        \"\"\"L∆∞u file XML h√≥a ƒë∆°n\"\"\"\n        xml_dir = \"invoices/xml\"\n        os.makedirs(xml_dir, exist_ok=True)\n        xml_path = f\"{xml_dir}/invoice_{invoice_id}.xml\"\n        \n        with open(xml_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(xml_content)\n            \n        return xml_path\n        \n    def _ensure_invoice_template(self):\n        \"\"\"T·∫°o template HTML h√≥a ƒë∆°n n·∫øu ch∆∞a c√≥\"\"\"\n        template_path = os.path.join(\n            os.path.dirname(__file__), \"..\", \"templates\", \"invoice_template.html\"\n        )\n        \n        if not os.path.exists(template_path):\n            template_content = '''\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>H√≥a ƒë∆°n ƒëi·ªán t·ª≠</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }\n        .header { text-align: center; margin-bottom: 30px; }\n        .company-info { text-align: center; margin-bottom: 20px; }\n        .invoice-info { margin: 20px 0; }\n        .customer-info { margin: 20px 0; }\n        .items-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n        .items-table th, .items-table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n        .items-table th { background-color: #f2f2f2; }\n        .total { text-align: right; font-weight: bold; margin: 20px 0; }\n        .signatures { display: flex; justify-content: space-between; margin-top: 40px; }\n        .signature { text-align: center; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>H√ìA ƒê∆†N ƒêI·ªÜN T·ª¨</h1>\n        <p>Invoice Number: {{ invoice.invoice_number }}</p>\n        <p>M√£ tra c·ª©u: {{ invoice.e_invoice_code }}</p>\n    </div>\n    \n    <div class=\"company-info\">\n        <h2>{{ company_name }}</h2>\n        <p>ƒê·ªãa ch·ªâ: {{ company_address }}</p>\n        <p>ƒêi·ªán tho·∫°i: {{ company_phone }}</p>\n    </div>\n    \n    <div class=\"invoice-info\">\n        <p><strong>Ng√†y ph√°t h√†nh:</strong> {{ invoice.issued_at.strftime('%d/%m/%Y') }}</p>\n        <p><strong>H·ªçc sinh:</strong> {{ data.student_name }} ({{ data.student_code }})</p>\n        <p><strong>L·ªõp:</strong> {{ data.class_name }}</p>\n    </div>\n    \n    <div class=\"customer-info\">\n        <p><strong>Ng∆∞·ªùi thanh to√°n:</strong> {{ invoice.customer_name }}</p>\n        <p><strong>ƒê·ªãa ch·ªâ:</strong> {{ invoice.customer_address or 'N/A' }}</p>\n    </div>\n    \n    <table class=\"items-table\">\n        <thead>\n            <tr>\n                <th>M√¥ t·∫£</th>\n                <th>S·ªë l∆∞·ª£ng</th>\n                <th>ƒê∆°n gi√°</th>\n                <th>Th√†nh ti·ªÅn</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td>{{ data.description }}</td>\n                <td>1</td>\n                <td>{{ \"{:,.0f}\".format(invoice.amount) }} VNƒê</td>\n                <td>{{ \"{:,.0f}\".format(invoice.amount) }} VNƒê</td>\n            </tr>\n        </tbody>\n    </table>\n    \n    <div class=\"total\">\n        <p>T·ªïng ti·ªÅn ch∆∞a thu·∫ø: {{ \"{:,.0f}\".format(invoice.amount) }} VNƒê</p>\n        <p>Thu·∫ø VAT ({{ data.tax_rate }}%): {{ \"{:,.0f}\".format(invoice.tax_amount) }} VNƒê</p>\n        <p><strong>T·ªïng c·ªông: {{ \"{:,.0f}\".format(invoice.total_amount) }} VNƒê</strong></p>\n        <p><strong>B·∫±ng ch·ªØ: {{ data.amount_in_words or '' }}</strong></p>\n    </div>\n    \n    <div class=\"signatures\">\n        <div class=\"signature\">\n            <p><strong>Ng∆∞·ªùi mua h√†ng</strong></p>\n            <p>(K√Ω v√† ghi r√µ h·ªç t√™n)</p>\n            <br><br><br>\n            <p>{{ invoice.customer_name }}</p>\n        </div>\n        <div class=\"signature\">\n            <p><strong>Ng∆∞·ªùi b√°n h√†ng</strong></p>\n            <p>(K√Ω v√† ghi r√µ h·ªç t√™n)</p>\n            <br><br><br>\n            <p>{{ company_name }}</p>\n        </div>\n    </div>\n    \n    <div style=\"margin-top: 40px; text-align: center; font-size: 12px; color: #666;\">\n        <p>H√≥a ƒë∆°n ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi h·ªá th·ªëng - {{ generated_at.strftime('%d/%m/%Y %H:%M:%S') }}</p>\n        <p>Tra c·ª©u h√≥a ƒë∆°n t·∫°i: tracuuhoadon.gdt.gov.vn v·ªõi m√£: {{ invoice.e_invoice_code }}</p>\n    </div>\n</body>\n</html>\n            '''\n            \n            os.makedirs(os.path.dirname(template_path), exist_ok=True)\n            with open(template_path, \"w\", encoding=\"utf-8\") as f:\n                f.write(template_content.strip())","size_bytes":13350},"app/services/payment_service.py":{"content":"\"\"\"\nService x·ª≠ l√Ω logic thanh to√°n QR code\nT√≠ch h·ª£p v·ªõi c√°c c·ªïng thanh to√°n ƒë∆∞·ª£c NHNN c·∫•p ph√©p\n\"\"\"\nimport os\nimport qrcode\nimport io\nimport base64\nimport uuid\nimport requests\nfrom typing import Dict, Optional\nfrom decimal import Decimal\nfrom sqlalchemy.orm import Session\nfrom app.models import Payment, Order, PaymentStatus\nfrom datetime import datetime\n\nclass PaymentGatewayService:\n    \"\"\"Service t√≠ch h·ª£p v·ªõi c·ªïng thanh to√°n\"\"\"\n    \n    def __init__(self):\n        self.gateway_url = os.getenv(\"PAYMENT_GATEWAY_URL\", \"https://api.demo-payment.com\")\n        self.api_key = os.getenv(\"PAYMENT_API_KEY\", \"demo-key\")\n        self.merchant_id = os.getenv(\"MERCHANT_ID\", \"demo-merchant\")\n        \n    def create_qr_payment(self, order: Order, amount: Decimal) -> Dict:\n        \"\"\"\n        T·∫°o QR code thanh to√°n qua API c·ªïng thanh to√°n th·∫≠t\n        Trong production s·∫Ω t√≠ch h·ª£p v·ªõi Viettel Pay, VNPay, etc.\n        \"\"\"\n        # T·∫°o m√£ giao d·ªãch unique\n        transaction_id = f\"TXN-{uuid.uuid4().hex[:12].upper()}\"\n        \n        # Payload g·ª≠i t·ªõi c·ªïng thanh to√°n\n        payload = {\n            \"merchant_id\": self.merchant_id,\n            \"transaction_id\": transaction_id,\n            \"amount\": float(amount),\n            \"currency\": \"VND\",\n            \"description\": f\"Thanh to√°n {order.description}\",\n            \"order_id\": order.order_code,\n            \"return_url\": f\"{os.getenv('BASE_URL', 'http://localhost:5000')}/payments/return\",\n            \"notify_url\": f\"{os.getenv('BASE_URL', 'http://localhost:5000')}/api/payments/webhook\"\n        }\n        \n        # Trong production s·∫Ω g·ªçi API th·∫≠t\n        # response = requests.post(f\"{self.gateway_url}/create-payment\", \n        #                         json=payload, \n        #                         headers={\"Authorization\": f\"Bearer {self.api_key}\"})\n        \n        # Mock response cho development\n        mock_response = {\n            \"success\": True,\n            \"transaction_id\": transaction_id,\n            \"qr_data\": f\"VIETQR|{self.merchant_id}|{transaction_id}|{amount}|VND|{order.description[:50]}\",\n            \"deep_link\": f\"vnpay://payment?amount={amount}&desc={order.description}\",\n            \"expires_at\": datetime.now().isoformat()\n        }\n        \n        return mock_response\n        \n    def generate_qr_image(self, qr_data: str) -> str:\n        \"\"\"T·∫°o QR code image t·ª´ data\"\"\"\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_M,\n            box_size=6,\n            border=4,\n        )\n        qr.add_data(qr_data)\n        qr.make(fit=True)\n        \n        # T·∫°o image v√† convert sang base64\n        img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n        buffer = io.BytesIO()\n        img.save(buffer, format='PNG')\n        return base64.b64encode(buffer.getvalue()).decode()\n        \n    def verify_webhook(self, webhook_data: Dict, signature: str) -> bool:\n        \"\"\"X√°c minh webhook signature t·ª´ c·ªïng thanh to√°n\"\"\"\n        # Trong production s·∫Ω verify signature th·∫≠t\n        # expected_signature = hmac.new(\n        #     self.webhook_secret.encode(),\n        #     json.dumps(webhook_data).encode(),\n        #     hashlib.sha256\n        # ).hexdigest()\n        # return hmac.compare_digest(expected_signature, signature)\n        \n        return True  # Mock cho development\n        \nclass PaymentService:\n    \"\"\"Service x·ª≠ l√Ω business logic thanh to√°n\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        self.gateway = PaymentGatewayService()\n        \n    def create_payment_request(self, order_id: int, amount: Decimal) -> Dict:\n        \"\"\"T·∫°o y√™u c·∫ßu thanh to√°n v√† QR code\"\"\"\n        order = self.db.query(Order).filter(Order.id == order_id).first()\n        if not order:\n            raise ValueError(\"Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng\")\n            \n        # G·ªçi API c·ªïng thanh to√°n\n        gateway_response = self.gateway.create_qr_payment(order, amount)\n        \n        if not gateway_response.get(\"success\"):\n            raise ValueError(\"Kh√¥ng th·ªÉ t·∫°o thanh to√°n\")\n            \n        # T·∫°o QR image\n        qr_image = self.gateway.generate_qr_image(gateway_response[\"qr_data\"])\n        \n        # L∆∞u payment record\n        payment = Payment(\n            order_id=order_id,\n            payment_code=gateway_response[\"transaction_id\"],\n            gateway_txn_id=gateway_response[\"transaction_id\"],\n            amount=amount,\n            payment_method=\"QR_CODE\",\n            qr_code_data=gateway_response[\"qr_data\"],\n            status=PaymentStatus.PENDING\n        )\n        \n        self.db.add(payment)\n        self.db.commit()\n        self.db.refresh(payment)\n        \n        return {\n            \"payment_id\": payment.id,\n            \"payment_code\": payment.payment_code,\n            \"qr_code_image\": f\"data:image/png;base64,{qr_image}\",\n            \"qr_data\": gateway_response[\"qr_data\"],\n            \"deep_link\": gateway_response.get(\"deep_link\"),\n            \"amount\": amount,\n            \"order_code\": order.order_code,\n            \"expires_at\": gateway_response.get(\"expires_at\")\n        }\n        \n    def process_webhook(self, webhook_data: Dict) -> bool:\n        \"\"\"X·ª≠ l√Ω webhook t·ª´ c·ªïng thanh to√°n\"\"\"\n        transaction_id = webhook_data.get(\"transaction_id\")\n        status = webhook_data.get(\"status\")\n        \n        if not transaction_id or not status:\n            return False\n            \n        # T√¨m payment record\n        payment = self.db.query(Payment).filter(\n            Payment.payment_code == transaction_id\n        ).first()\n        \n        if not payment:\n            return False\n            \n        # C·∫≠p nh·∫≠t tr·∫°ng th√°i\n        if status == \"success\":\n            payment.status = PaymentStatus.SUCCESS\n            payment.paid_at = datetime.now()\n            \n            # C·∫≠p nh·∫≠t order status\n            order = self.db.query(Order).filter(Order.id == payment.order_id).first()\n            if order:\n                order.status = \"PAID\"\n                \n        elif status == \"failed\":\n            payment.status = PaymentStatus.FAILED\n            \n        self.db.commit()\n        return True","size_bytes":6260},"app/services/print_service.py":{"content":"\"\"\"\nService qu·∫£n l√Ω in h√≥a ƒë∆°n qua LAN/WAN\nH·ªó tr·ª£ in tr·ª±c ti·∫øp qua IPP/CUPS v√† Print Agent t·ª´ xa\n\"\"\"\nimport os\nimport json\nimport requests\nimport subprocess\nfrom typing import Dict, List, Optional\nfrom sqlalchemy.orm import Session\nfrom app.models import Printer, PrinterAgent, PrintJob, Invoice\nfrom datetime import datetime\nimport tempfile\n\nclass PrinterService:\n    \"\"\"Service qu·∫£n l√Ω m√°y in\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        \n    def discover_network_printers(self) -> List[Dict]:\n        \"\"\"T·ª± ƒë·ªông ph√°t hi·ªán m√°y in tr√™n m·∫°ng LAN\"\"\"\n        try:\n            # S·ª≠ d·ª•ng CUPS ƒë·ªÉ t√¨m m√°y in (Linux)\n            if os.name == 'posix':\n                result = subprocess.run(['lpstat', '-p'], capture_output=True, text=True)\n                printers = []\n                \n                if result.returncode == 0:\n                    lines = result.stdout.split('\\\\n')\n                    for line in lines:\n                        if 'printer' in line:\n                            printer_name = line.split(' ')[1]\n                            printers.append({\n                                'name': printer_name,\n                                'type': 'NETWORK',\n                                'driver': 'IPP'\n                            })\n                            \n                return printers\n                \n            # Windows printer discovery\n            elif os.name == 'nt':\n                # C√≥ th·ªÉ s·ª≠ d·ª•ng WMI ƒë·ªÉ t√¨m m√°y in Windows\n                return []\n                \n        except Exception as e:\n            print(f\"Error discovering printers: {e}\")\n            \n        return []\n        \n    def register_printer(self, printer_data: Dict) -> Optional[Printer]:\n        \"\"\"ƒêƒÉng k√Ω m√°y in m·ªõi v√†o h·ªá th·ªëng\"\"\"\n        try:\n            printer = Printer(\n                name=printer_data['name'],\n                location=printer_data.get('location', ''),\n                ip_address=printer_data.get('ip_address', ''),\n                printer_type=printer_data.get('type', 'NETWORK'),\n                is_active=True\n            )\n            \n            self.db.add(printer)\n            self.db.commit()\n            self.db.refresh(printer)\n            \n            return printer\n            \n        except Exception as e:\n            print(f\"Error registering printer: {e}\")\n            self.db.rollback()\n            return None\n            \n    def get_active_printers(self) -> List[Printer]:\n        \"\"\"L·∫•y danh s√°ch m√°y in ƒëang ho·∫°t ƒë·ªông\"\"\"\n        return self.db.query(Printer).filter(Printer.is_active == True).all()\n\nclass PrintAgentService:\n    \"\"\"Service qu·∫£n l√Ω Print Agent cho in t·ª´ xa\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        \n    def register_agent(self, agent_data: Dict) -> Optional[PrinterAgent]:\n        \"\"\"ƒêƒÉng k√Ω Print Agent m·ªõi\"\"\"\n        try:\n            agent = PrinterAgent(\n                host_id=agent_data['host_id'],\n                host_name=agent_data.get('host_name', ''),\n                jwt_token=agent_data.get('jwt_token', ''),\n                last_seen=datetime.now(),\n                is_active=True\n            )\n            \n            self.db.add(agent)\n            self.db.commit()\n            self.db.refresh(agent)\n            \n            return agent\n            \n        except Exception as e:\n            print(f\"Error registering print agent: {e}\")\n            self.db.rollback()\n            return None\n            \n    def send_print_job_to_agent(self, agent_id: int, job_data: Dict) -> bool:\n        \"\"\"G·ª≠i job in t·ªõi Print Agent t·ª´ xa\"\"\"\n        try:\n            agent = self.db.query(PrinterAgent).filter(\n                PrinterAgent.id == agent_id,\n                PrinterAgent.is_active == True\n            ).first()\n            \n            if not agent:\n                return False\n                \n            # T·∫°o payload g·ª≠i t·ªõi agent\n            payload = {\n                'job_id': job_data['job_id'],\n                'printer_name': job_data['printer_name'],\n                'document_data': job_data['document_data'],\n                'document_type': job_data.get('document_type', 'PDF'),\n                'copies': job_data.get('copies', 1),\n                'paper_size': job_data.get('paper_size', 'A4')\n            }\n            \n            # Gi·∫£ s·ª≠ agent c√≥ endpoint ƒë·ªÉ nh·∫≠n job\n            agent_url = f\"http://{agent.host_name}:8080/print-job\"\n            \n            response = requests.post(\n                agent_url,\n                json=payload,\n                headers={'Authorization': f'Bearer {agent.jwt_token}'},\n                timeout=10\n            )\n            \n            if response.status_code == 200:\n                # C·∫≠p nh·∫≠t last_seen\n                agent.last_seen = datetime.now()\n                self.db.commit()\n                return True\n                \n        except Exception as e:\n            print(f\"Error sending job to print agent: {e}\")\n            \n        return False\n\nclass PrintJobService:\n    \"\"\"Service qu·∫£n l√Ω c√¥ng vi·ªác in\"\"\"\n    \n    def __init__(self, db: Session):\n        self.db = db\n        self.printer_service = PrinterService(db)\n        self.agent_service = PrintAgentService(db)\n        \n    def create_print_job(\n        self, \n        invoice_id: int, \n        printer_id: int, \n        options: Optional[Dict] = None\n    ) -> Optional[PrintJob]:\n        \"\"\"T·∫°o job in h√≥a ƒë∆°n\"\"\"\n        try:\n            # L·∫•y th√¥ng tin h√≥a ƒë∆°n\n            invoice = self.db.query(Invoice).filter(Invoice.id == invoice_id).first()\n            if not invoice:\n                raise ValueError(\"Kh√¥ng t√¨m th·∫•y h√≥a ƒë∆°n\")\n                \n            # L·∫•y th√¥ng tin m√°y in\n            printer = self.db.query(Printer).filter(Printer.id == printer_id).first()\n            if not printer:\n                raise ValueError(\"Kh√¥ng t√¨m th·∫•y m√°y in\")\n                \n            # T·∫°o d·ªØ li·ªáu in (c√≥ th·ªÉ l√† HTML, PDF base64, etc.)\n            print_data = self._prepare_print_data(invoice, options or {})\n            \n            # T·∫°o print job record\n            print_job = PrintJob(\n                printer_id=printer_id,\n                invoice_id=invoice_id,\n                job_data=json.dumps(print_data),\n                status=\"pending\"\n            )\n            \n            self.db.add(print_job)\n            self.db.commit()\n            self.db.refresh(print_job)\n            \n            # Th·ª±c hi·ªán in\n            success = self._execute_print_job(print_job, printer)\n            \n            if success:\n                print_job.status = \"sent\"\n                print_job.sent_at = datetime.now()\n            else:\n                print_job.status = \"failed\"\n                \n            self.db.commit()\n            \n            return print_job\n            \n        except Exception as e:\n            print(f\"Error creating print job: {e}\")\n            self.db.rollback()\n            return None\n            \n    def _prepare_print_data(self, invoice: Invoice, options: Dict) -> Dict:\n        \"\"\"Chu·∫©n b·ªã d·ªØ li·ªáu in\"\"\"\n        # ƒê·ªçc file PDF n·∫øu c√≥\n        if invoice.pdf_path and os.path.exists(invoice.pdf_path):\n            with open(invoice.pdf_path, 'rb') as f:\n                pdf_data = f.read()\n                \n            return {\n                'type': 'PDF',\n                'data': pdf_data.hex(),  # Convert to hex string\n                'options': {\n                    'copies': options.get('copies', 1),\n                    'paper_size': options.get('paper_size', 'A4'),\n                    'orientation': options.get('orientation', 'portrait')\n                }\n            }\n            \n        # Fallback: t·∫°o HTML ƒë∆°n gi·∫£n ƒë·ªÉ in\n        return {\n            'type': 'HTML',\n            'data': self._generate_simple_html(invoice),\n            'options': options\n        }\n        \n    def _generate_simple_html(self, invoice: Invoice) -> str:\n        \"\"\"T·∫°o HTML ƒë∆°n gi·∫£n cho in nhanh\"\"\"\n        return f\"\"\"\n        <!DOCTYPE html>\n        <html>\n        <head>\n            <meta charset=\"UTF-8\">\n            <style>\n                body {{ font-family: Arial, sans-serif; margin: 20px; }}\n                .header {{ text-align: center; margin-bottom: 30px; }}\n                .info {{ margin: 10px 0; }}\n                .total {{ font-weight: bold; font-size: 14px; margin-top: 20px; }}\n            </style>\n        </head>\n        <body>\n            <div class=\"header\">\n                <h2>H√ìA ƒê∆†N ƒêI·ªÜN T·ª¨</h2>\n                <p>S·ªë: {invoice.invoice_number}</p>\n            </div>\n            \n            <div class=\"info\">\n                <p><strong>Kh√°ch h√†ng:</strong> {invoice.customer_name}</p>\n                <p><strong>M√£ tra c·ª©u:</strong> {invoice.e_invoice_code or 'N/A'}</p>\n                <p><strong>Ng√†y ph√°t h√†nh:</strong> {invoice.issued_at.strftime('%d/%m/%Y')}</p>\n            </div>\n            \n            <div class=\"total\">\n                <p>T·ªïng ti·ªÅn: {invoice.total_amount:,.0f} VNƒê</p>\n            </div>\n            \n            <div style=\"margin-top: 40px; text-align: center; font-size: 12px;\">\n                <p>--- C·∫£m ∆°n qu√Ω kh√°ch ---</p>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n        \n    def _execute_print_job(self, job: PrintJob, printer: Printer) -> bool:\n        \"\"\"Th·ª±c hi·ªán in job\"\"\"\n        try:\n            job_data = json.loads(job.job_data)\n            \n            if printer.agent_id:\n                # In qua Print Agent (WAN)\n                return self.agent_service.send_print_job_to_agent(\n                    printer.agent_id,\n                    {\n                        'job_id': job.id,\n                        'printer_name': printer.name,\n                        'document_data': job_data['data'],\n                        'document_type': job_data['type'],\n                        'copies': job_data['options'].get('copies', 1)\n                    }\n                )\n            else:\n                # In tr·ª±c ti·∫øp qua LAN\n                return self._print_direct(printer, job_data)\n                \n        except Exception as e:\n            print(f\"Error executing print job: {e}\")\n            return False\n            \n    def _print_direct(self, printer: Printer, job_data: Dict) -> bool:\n        \"\"\"In tr·ª±c ti·∫øp qua CUPS/IPP (LAN)\"\"\"\n        try:\n            if job_data['type'] == 'PDF':\n                # T·∫°o file t·∫°m cho PDF\n                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:\n                    temp_file.write(bytes.fromhex(job_data['data']))\n                    temp_file_path = temp_file.name\n                    \n                # In b·∫±ng lpr command (Linux)\n                if os.name == 'posix':\n                    cmd = ['lpr', '-P', printer.name, temp_file_path]\n                    \n                    # Th√™m options\n                    options = job_data.get('options', {})\n                    if options.get('copies', 1) > 1:\n                        cmd.extend(['-#', str(options['copies'])])\n                        \n                    result = subprocess.run(cmd, capture_output=True)\n                    \n                    # Cleanup\n                    os.unlink(temp_file_path)\n                    \n                    return result.returncode == 0\n                    \n            elif job_data['type'] == 'HTML':\n                # Convert HTML to PDF r·ªìi in\n                from weasyprint import HTML\n                \n                with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:\n                    HTML(string=job_data['data']).write_pdf(temp_file.name)\n                    \n                    if os.name == 'posix':\n                        result = subprocess.run(['lpr', '-P', printer.name, temp_file.name])\n                        os.unlink(temp_file.name)\n                        return result.returncode == 0\n                        \n        except Exception as e:\n            print(f\"Error in direct printing: {e}\")\n            \n        return False\n        \n    def get_print_jobs(self, status: Optional[str] = None) -> List[PrintJob]:\n        \"\"\"L·∫•y danh s√°ch job in\"\"\"\n        query = self.db.query(PrintJob)\n        \n        if status:\n            query = query.filter(PrintJob.status == status)\n            \n        return query.order_by(PrintJob.created_at.desc()).all()\n        \n    def retry_failed_job(self, job_id: int) -> bool:\n        \"\"\"Th·ª≠ l·∫°i job in b·ªã l·ªói\"\"\"\n        try:\n            job = self.db.query(PrintJob).filter(PrintJob.id == job_id).first()\n            if not job or job.status != 'failed':\n                return False\n                \n            printer = self.db.query(Printer).filter(Printer.id == job.printer_id).first()\n            if not printer:\n                return False\n                \n            # Reset status v√† th·ª≠ l·∫°i\n            job.status = 'pending'\n            self.db.commit()\n            \n            job_data = json.loads(job.job_data)\n            success = self._execute_print_job(job, printer)\n            \n            if success:\n                job.status = 'sent'\n                job.sent_at = datetime.now()\n            else:\n                job.status = 'failed'\n                \n            self.db.commit()\n            return success\n            \n        except Exception as e:\n            print(f\"Error retrying print job: {e}\")\n            return False","size_bytes":13642}},"version":1}