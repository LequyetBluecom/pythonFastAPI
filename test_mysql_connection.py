#!/usr/bin/env python3
"""
Script test k·∫øt n·ªëi MySQL v·ªõi Railway
"""

import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# C·∫•u h√¨nh Railway MySQL
RAILWAY_MYSQL_URL = "mysql+pymysql://root:ghsuZYkyyMNrBjvIukthudfDXVpMzpgh@maglev.proxy.rlwy.net:10410/railway"

def test_mysql_connection():
    """Test k·∫øt n·ªëi MySQL v·ªõi Railway"""
    print("üîå ƒêang test k·∫øt n·ªëi MySQL v·ªõi Railway...")
    print(f"URL: {RAILWAY_MYSQL_URL}")
    print("=" * 60)
    
    try:
        # T·∫°o engine v·ªõi c·∫•u h√¨nh MySQL
        engine = create_engine(
            RAILWAY_MYSQL_URL,
            echo=True,
            pool_pre_ping=True,
            pool_recycle=300,
            connect_args={
                "charset": "utf8mb4",
                "autocommit": True
            }
        )
        
        # Test k·∫øt n·ªëi
        with engine.connect() as connection:
            print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
            
            # Test query c∆° b·∫£n
            result = connection.execute(text("SELECT VERSION() as version"))
            version = result.fetchone()
            print(f"üìä MySQL Version: {version[0]}")
            
            # Test t·∫°o database n·∫øu ch∆∞a c√≥
            try:
                connection.execute(text("CREATE DATABASE IF NOT EXISTS school_payment_db"))
                print("‚úÖ Database 'school_payment_db' ƒë√£ s·∫µn s√†ng")
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói t·∫°o database: {e}")
            
            # Test s·ª≠ d·ª•ng database
            connection.execute(text("USE school_payment_db"))
            print("‚úÖ ƒê√£ chuy·ªÉn sang database 'school_payment_db'")
            
            # Test t·∫°o b·∫£ng test
            try:
                connection.execute(text("""
                    CREATE TABLE IF NOT EXISTS test_connection (
                        id INT AUTO_INCREMENT PRIMARY KEY,
                        message VARCHAR(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """))
                print("‚úÖ B·∫£ng test ƒë√£ ƒë∆∞·ª£c t·∫°o")
                
                # Test insert
                connection.execute(text("""
                    INSERT INTO test_connection (message) VALUES ('Test connection successful')
                """))
                print("‚úÖ Insert test th√†nh c√¥ng")
                
                # Test select
                result = connection.execute(text("SELECT * FROM test_connection ORDER BY id DESC LIMIT 1"))
                row = result.fetchone()
                print(f"‚úÖ Select test: {row}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  L·ªói test b·∫£ng: {e}")
            
        print("=" * 60)
        print("üéâ K·∫øt n·ªëi MySQL Railway th√†nh c√¥ng!")
        return True
        
    except SQLAlchemyError as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi database: {e}")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return False

def test_app_database_config():
    """Test c·∫•u h√¨nh database trong app"""
    print("\nüîß ƒêang test c·∫•u h√¨nh database trong app...")
    
    try:
        # Import app modules
        sys.path.append('.')
        from app.core.config import settings
        from app.database import engine
        
        print(f"üìä Database URL: {settings.database_url}")
        print(f"üìä DB Echo: {settings.DB_ECHO}")
        
        # Test engine
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1 as test"))
            test_result = result.fetchone()
            print(f"‚úÖ App database test: {test_result[0]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test app database: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ B·∫Øt ƒë·∫ßu test k·∫øt n·ªëi MySQL Railway")
    print("=" * 60)
    
    # Test 1: K·∫øt n·ªëi tr·ª±c ti·∫øp
    success1 = test_mysql_connection()
    
    # Test 2: C·∫•u h√¨nh app
    if success1:
        success2 = test_app_database_config()
        
        if success1 and success2:
            print("\nüéâ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng!")
            print("üí° B·∫°n c√≥ th·ªÉ ch·∫°y ·ª©ng d·ª•ng v·ªõi MySQL Railway")
        else:
            print("\n‚ö†Ô∏è  M·ªôt s·ªë test th·∫•t b·∫°i, ki·ªÉm tra c·∫•u h√¨nh")
    else:
        print("\n‚ùå K·∫øt n·ªëi database th·∫•t b·∫°i")
        print("üí° Ki·ªÉm tra th√¥ng tin k·∫øt n·ªëi Railway")
