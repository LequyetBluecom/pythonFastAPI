"""
Main FastAPI application with improved structure
"""
import os
import uvicorn
from fastapi import FastAPI, HTTPException
from fastapi.exceptions import RequestValidationError
from fastapi.middleware.cors import CORSMiddleware

from app.core.config import settings
from app.core.exceptions import (
    AppException, 
    app_exception_handler, 
    http_exception_handler,
    validation_exception_handler,
    generic_exception_handler
)
from app.database import Base, engine
from app.api.v1.api import api_router
from app import init as app_init

# Tags metadata to describe groups in Swagger UI
tags_metadata = [
    {
        "name": "Authentication",
        "description": "ƒêƒÉng nh·∫≠p, ƒëƒÉng k√Ω, l·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i. S·ª≠ d·ª•ng Bearer token cho c√°c API b·∫£o v·ªá.",
    },
    {
        "name": "Users",
        "description": "Qu·∫£n l√Ω ng∆∞·ªùi d√πng: danh s√°ch, t·∫°o m·ªõi (ch·ªâ admin), xem chi ti·∫øt.",
    },
    {
        "name": "Students",
        "description": "Qu·∫£n l√Ω h·ªçc sinh: g·∫Øn v·ªõi ph·ª• huynh (user role parent), xem/tra c·ª©u.",
    },
    {
        "name": "Orders",
        "description": "ƒê∆°n h√†ng/phi·∫øu thu h·ªçc ph√≠ cho h·ªçc sinh, tr·∫°ng th√°i pending/paid/invoiced.",
    },
    {
        "name": "Payments",
        "description": "T·∫°o QR thanh to√°n, nh·∫≠n webhook, truy v·∫•n giao d·ªãch.",
    },
    {
        "name": "Invoices",
        "description": "Ph√°t h√†nh h√≥a ƒë∆°n ƒëi·ªán t·ª≠, t·∫£i PDF/XML, tra c·ª©u.",
    },
    {
        "name": "Dashboard & Reports",
        "description": "B√°o c√°o t·ªïng h·ª£p, ƒë·ªëi so√°t, th·ªëng k√™ theo th·ªùi gian.",
    },
    {
        "name": "Print Management",
        "description": "Qu·∫£n l√Ω m√°y in v√† l·ªánh in h√≥a ƒë∆°n/phi·∫øu.",
    },
]

# Create database tables
Base.metadata.create_all(bind=engine)
app_init.ensure_default_admin()

# Initialize FastAPI app with settings
app = FastAPI(
    title=settings.APP_NAME,
    description=settings.APP_DESCRIPTION,
    version=settings.APP_VERSION,
    debug=settings.DEBUG,
    openapi_tags=tags_metadata,
    swagger_ui_parameters={
        "displayRequestDuration": True,
        "tryItOutEnabled": True,
        # Enable request snippets (Swagger UI plugin) for quick copy-paste
        "requestSnippetsEnabled": True,
        "requestSnippets": [
            {"generator": "curl", "title": "cURL", "syntax": "bash"},
            {"generator": "javascript", "title": "JavaScript (fetch)", "syntax": "javascript"},
            {"generator": "javascript-axios", "title": "JavaScript (axios)", "syntax": "javascript"}
            # PHP can use the cURL snippet directly in php-curl
        ],
        "syntaxHighlight": {"activated": True, "theme": "monokai"}
    }
)

# Add exception handlers
app.add_exception_handler(AppException, app_exception_handler)
app.add_exception_handler(HTTPException, http_exception_handler)
app.add_exception_handler(RequestValidationError, validation_exception_handler)
app.add_exception_handler(Exception, generic_exception_handler)

# CORS middleware (env-driven)
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
)

# Include API v1 router
app.include_router(api_router, prefix="/api/v1")

# Route ch√≠nh
@app.get("/")
def read_root():
    return {
        "message": "H·ªá th·ªëng Thanh to√°n QR Tr∆∞·ªùng h·ªçc üè´",
        "version": "1.0.0",
        "docs": "/docs",
        "features": [
            "Thanh to√°n QR code",
            "H√≥a ƒë∆°n ƒëi·ªán t·ª≠",
            "Qu·∫£n l√Ω h·ªçc sinh",
            "B√°o c√°o ƒë·ªëi so√°t"
        ]
    }

# Health check endpoint
@app.get("/healthz")
def health_check():
    return {"status": "healthy", "service": "school-payment-system"}

# Production server entry point
if __name__ == "__main__":
    port = int(os.getenv("PORT", "5000"))
    uvicorn.run(app, host="0.0.0.0", port=port)
